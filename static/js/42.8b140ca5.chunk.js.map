{"version":3,"sources":["reusable/DocsLink.js","views/theme/colors/Colors ori.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","ReviewChart","useState","xData","setXData","yData","setYData","useForm","register","handleSubmit","formState","errors","Date","startDate","setStartDate","convertDate","parts","toString","split","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","data","a","console","log","axios","get","Node","type","then","res","status","values","time","catch","error","onSubmit","value","selected","onChange","date","dateFormat","x","y","marker","color","useResizeHandler","style","width","height","graphDiv"],"mappings":"qQAGMA,EAAW,SAAAC,GAAU,IAEvBC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,KACGC,EAJmB,YAKpBH,EALoB,iBAOlBI,EAAOH,EAAI,kDAA8CA,GAASD,EAAMI,KAE9E,OACE,qBAAKC,UAAU,sBAAf,SACE,cAAC,KAAD,2BACMF,GADN,IAEEC,KAAMA,EACNE,IAAI,sBACJC,OAAO,SACPF,UAAU,qBALZ,SAOE,uBAAOA,UAAU,aAAjB,SAAgCH,GAAQ,eAMjCM,MAAMC,KAAKV,I,0MCuIXW,UAvJK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEEF,mBAAS,IAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAQpBC,cAHFC,EALsB,EAKtBA,SACAC,EANsB,EAMtBA,aANsB,KAOtBC,UAAaC,OAGmBT,mBAAS,IAAIU,OAVvB,mBAUjBC,EAViB,KAUNC,EAVM,KAalBC,EAAc,WAClB,IACIC,EADMH,EAAUI,WACJC,MAAM,KAetB,MAda,CACXC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MAEOd,EAAM,IAAM,IAAMA,EAAM,GAAK,IAAMA,EAAM,IA9BjC,4CAuDxB,WAAwBe,GAAxB,SAAAC,EAAA,sDACEC,QAAQC,IAAI,iCACZC,IACGC,IADH,gDAE6CL,EAAKM,KAFlD,iBAE+DtB,IAF/D,iBAIcgB,EAAKO,OAEhBC,MAAK,SAACC,GAIL,GAFAP,QAAQC,IAAIM,EAAIT,MAEG,MAAfS,EAAIC,OAAgB,CAAC,IAAD,EACGD,EAAIT,KAArBW,EADc,EACdA,OAAQC,EADM,EACNA,KAEhBrC,EAASoC,GACTtC,EAASuC,OAGZC,OAAM,SAACC,GACNZ,QAAQC,IAAIW,MApBlB,4CAvDwB,sBA0FxB,OACE,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,+BACA,cAAC,IAAD,UACE,sBAAMC,SAAUrC,GA/FA,8CA+FhB,SACE,eAAC,KAAD,WACE,eAAC,IAAD,WACE,2CACA,mDAAYD,EAAS,SAArB,cACE,wBAAQuC,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,sBAIJ,eAAC,IAAD,WACE,oDACA,cAAC,IAAD,CACEC,SAAUnC,EACVoC,SAAU,SAACC,GAAD,OAAUpC,EAAaoC,IACjCC,WAAW,kBAGf,eAAC,IAAD,WACE,2CACA,mDAAY3C,EAAS,SAArB,cACE,wBAAQuC,MAAM,SAAd,gCACA,wBAAQA,MAAM,UAAd,iCACA,wBAAQA,MAAM,UAAd,oCACA,wBAAQA,MAAM,WAAd,4CAGJ,cAAC,IAAD,UACE,uBAAOT,KAAK,oBAKpB,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEP,KAAM,CACJ,CACEqB,EAAGjD,EACHkD,EAAGhD,EACHiC,KAAM,UACNgB,OAAQ,CAAEC,MAAO,SAGrBC,kBAAkB,EAClBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,SAAS,eAnDjB","file":"static/js/42.8b140ca5.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ReviewChart = () => {\n  const [xData, setXData] = useState([]);\n  const [yData, setYData] = useState([]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const [startDate, setStartDate] = useState(new Date());\n\n  //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n  const convertDate = () => {\n    let str = startDate.toString();\n    let parts = str.split(\" \");\n    let months = {\n      Jan: \"01\",\n      Feb: \"02\",\n      Mar: \"03\",\n      Apr: \"04\",\n      May: \"05\",\n      Jun: \"06\",\n      Jul: \"07\",\n      Aug: \"08\",\n      Sep: \"09\",\n      Oct: \"10\",\n      Nov: \"11\",\n      Dec: \"12\",\n    };\n    return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n  };\n\n  // async function onSubmit(data) {\n  //   console.log(\"The Submit button was clicked\");\n\n  //   axios.get(`https://49.124.145.219:8780/data?node=${data.Node}&date=${convertDate(startDate)}`)\n  //     .then((response) => {\n  //       //Data coming in from API, should be sent to create the chart.\n  //       console.log(response);\n\n  //       setfetchedData(\n  //         {\n  //           x: response.time,\n  //           y: response.data,\n  //         }\n  //       )\n\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // }\n  let APIData = {};\n\n  async function onSubmit(data) {\n    console.log(\"The Submit button was clicked\");\n    axios\n      .get(\n        `https://49.124.145.219:8780/data?node=${data.Node}&date=${convertDate(\n          startDate\n        )}&data=${data.type}`\n      )\n      .then((res) => {\n        //Data coming in from API, should be sent to create the chart.\n        console.log(res.data);\n\n        if (res.status === 200) {\n          const { values, time } = res.data;\n\n          setYData(values);\n          setXData(time);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // useEffect(() => {\n  //   setfetchedData(APIData);                            //how to\n  //   console.log('UseEffect was triggered');\n  // }, []);\n\n  // const handleSubmit = (e) => {\n  //   e.preventdefault();\n  //   setfetchedData(data);\n  //   console.log('HandleSubmit Data.Node ===>', data.Node);\n  // };\n\n  return (\n    <div>\n      <CCard>\n        <CCardHeader>Review Past Data</CCardHeader>\n        <CCardBody>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <CRow>\n              <CCol>\n                <label>Node: </label>\n                <select {...register(\"Node\")}>\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                </select>\n              </CCol>\n\n              <CCol>\n                <label>Select the Date</label>\n                <DatePicker\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  dateFormat=\"MM/dd/yyyy\"\n                />\n              </CCol>\n              <CCol>\n                <label>Node: </label>\n                <select {...register(\"type\")}>\n                  <option value=\"TempIn\">Temperature Inside</option>\n                  <option value=\"TempOut\">Temperature Outside</option>\n                  <option value=\"LightIn\">Light Intensity Inside</option>\n                  <option value=\"LightOut\">Light Intensity Outside</option>\n                </select>\n              </CCol>\n              <CCol>\n                <input type=\"submit\" />\n              </CCol>\n            </CRow>\n          </form>\n        </CCardBody>\n        <CCardHeader></CCardHeader>\n        <CCardBody>\n          <Plot\n            data={[\n              {\n                x: xData,\n                y: yData,\n                type: \"scatter\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            graphDiv=\"graph\"\n          />\n        </CCardBody>\n      </CCard>\n      ``\n    </div>\n  );\n};\n\nexport default ReviewChart;\n"],"sourceRoot":""}