{"version":3,"sources":["views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js","views/Commands/LEDSwitch.js","views/CustomCharts/LightIn.js","views/CustomCharts/LightOut.js","views/widgets/TempInsideWidget.js","views/widgets/TempOutsideWidget.js","views/widgets/NodeCountWidget.js","views/widgets/WindowPositionWidget.js","views/Commands/ManualOverride.js","views/dashboard/Dashboard.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","ChartBarSimple","barPercentage","categoryPercentage","socket","io","connect","transports","reconnect","LEDSwitch","useState","checked","setChecked","useEffect","on","console","log","Status","LED","emit","className","onChange","nextChecked","LightIn","state","xValue","yValue","x","y","name","type","mode","marker","layout","datarevision","revision","time","increaseGraphic","push","_data","values","setState","axios","get","moment","format","then","res","status","this","useResizeHandler","style","width","height","graphDiv","React","Component","LightOut","TempInsideWidget","TempInside","setTempInside","TempIn","header","text","TempOutsideWidget","TempOut","setTempOut","NodeCountWidget","count","setCount","value","WindowPositionWidget","verticalAlign","ManualOverride","Override","require","Dashboard","sm","lg","id"],"mappings":"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","file":"static/js/22.741ebf07.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n","import React, { useState, useEffect } from \"react\";\nimport Switch from \"react-switch\";\nimport \"../../scss/_custom.scss\";\nimport io from \"socket.io-client\";\n\nconst socket = io.connect(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n  reconnect: true,\n});\n\nconst LEDSwitch = () => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n\n  useEffect(() => {\n    socket.on(\"connect\", function (socket) {\n      console.log(\"Client connected\");\n    });\n    let Status = { LED: false };\n\n    if (checked) {\n      Status.LED = true;\n    } else {\n      Status.LED = false;\n    }\n\n    socket.emit(\"LED\", \"Node1\", Status);\n    // Update the document title using the browser API\n  });\n\n  return (\n    <div className=\"example\">\n      <label>\n        <Switch\n          onChange={handleChange}\n          checked={checked}\n          className=\"react-switch\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default LEDSwitch;\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nexport default class LightIn extends React.Component {\n  state = {\n    //Initial State of data\n    xValue: [],\n    yValue: [],\n    data: [\n      {\n        x: [],\n        y: [],\n        name: \"Line 1\",\n        type: \"scatter\",\n        mode: \"lines\",\n        marker: { color: \"blue\" },\n      },\n    ],\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n    time: \"\",\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        `https://iot.syedsuhaibshah.com/data?node=2&date=${moment().format(\n          \"L\"\n        )}&data=LightIn`\n      )\n      .then((res) => {\n        if (res.status === 200) {\n          //Need to figure out how to take this data and plot it on the graph.\n          console.log(\"y-axis\" + res.data.values);\n          console.log(\"x-axis\" + res.data.time);\n\n          const { layout, revision, data, xValue, yValue } = this.state; //Just uses the es6 destructuring.\n\n          // xValue = res.data.time\n          // yValue = res.data.values\n\n          let _data = [\n            {\n              x: res.data.time,\n              y: res.data.values,\n            },\n          ];\n          //console.log('x-axis time array: ' + data[0].x)\n          //console.log('y-axis data array: ' + data[0].y)\n\n          // this.increaseGraphic({ , time })\n          this.setState({\n            revision: this.state.revision + 1,\n            data: _data,\n            xValue: res.data.time,\n            yValue: res.data.values,\n          });\n          layout.datarevision = this.state.revision + 1;\n        }\n      })\n      .then(() => {\n        socket.on(\"DataStream\", (data) => {\n          //Data coming in from the socket being sent to increaseGraphic function\n          this.increaseGraphic(data);\n        }); //End of Socket subscription.\n      });\n  }\n\n  increaseGraphic = ({ LightIn, time }) => {\n    //Incoming data is passed as an object.\n    const { layout, revision, data, xValue, yValue } = this.state;\n\n    xValue.push(time);\n    yValue.push(LightIn);\n\n    let _data = Object.values(data);\n    _data[0].x = xValue;\n    _data[0].y = yValue;\n\n    // line1.x.push(time);\n    // line1.y.push(value);\n    // line1.dummy.push(revision);\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n    // let _revision = revision++;\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1, data: _data });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={this.state.data}\n          layout={this.state.layout}\n          revision={this.state.revision}\n          useResizeHandler={true}\n          style={{ width: \"100%\", height: \"100%\" }}\n          graphDiv=\"graph\"\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nexport default class LightOut extends React.Component {\n  state = {\n    //Initial State of data\n    xValue: [],\n    yValue: [],\n    data: [\n      {\n        x: [],\n        y: [],\n        name: \"Line 1\",\n        type: \"scatter\",\n        mode: \"lines\",\n        marker: { color: \"blue\" },\n      },\n    ],\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n    time: \"\",\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        `https://iot.syedsuhaibshah.com/data?node=2&date=${moment().format(\n          \"L\"\n        )}&data=LightOut`\n      )\n      .then((res) => {\n        if (res.status === 200) {\n          //Need to figure out how to take this data and plot it on the graph.\n          console.log(\"y-axis\" + res.data.values);\n          console.log(\"x-axis\" + res.data.time);\n\n          const { layout, revision, data, xValue, yValue } = this.state; //Just uses the es6 destructuring.\n\n          // xValue = res.data.time\n          // yValue = res.data.values\n\n          let _data = [\n            {\n              x: res.data.time,\n              y: res.data.values,\n            },\n          ];\n\n          //console.log('x-axis time array: ' + data[0].x)\n          //console.log('y-axis data array: ' + data[0].y)\n\n          // this.increaseGraphic({ , time })\n          this.setState({\n            //This function will set the data in the state object, every time setState is called the graph renders.\n            revision: this.state.revision + 1,\n            data: _data,\n            xValue: res.data.time,\n            yValue: res.data.values,\n          });\n          layout.datarevision = this.state.revision + 1;\n        }\n      })\n      .then(() => {\n        socket.on(\"DataStream\", (data) => {\n          //Data coming in from the socket being sent to increaseGraphic function\n          this.increaseGraphic(data);\n        }); //End of Socket subscription.\n      });\n  }\n\n  increaseGraphic = ({ LightOut, time }) => {\n    //Incoming data is passed as an object.\n    const { layout, revision, data, xValue, yValue } = this.state;\n\n    xValue.push(time);\n    yValue.push(LightOut);\n\n    console.log(\"datat\", data[0].x);\n\n    let _data = Object.values(data);\n    _data[0].x = xValue;\n    _data[0].y = yValue;\n\n    console.log(\"DATA=>\", _data);\n\n    // line1.x.push(time);\n    // line1.y.push(value);\n    // line1.dummy.push(revision);\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n    // let _revision = revision++;\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1, data: _data });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={this.state.data}\n          layout={this.state.layout}\n          revision={this.state.revision}\n          useResizeHandler={true}\n          style={{ width: \"100%\", height: \"100%\" }}\n          graphDiv=\"graph\"\n        />\n      </div>\n    );\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport ChartBarSimple from \"../charts/ChartLineSimple\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nconst TempInsideWidget = () => {\n  let [TempInside, setTempInside] = useState(0);\n\n  useEffect(() => {\n    socket.on(\"DataStream\", (data) => {\n      setTempInside((TempInside = data.TempIn));\n    });\n  });\n\n  // render\n  return (\n    <>\n      <CCol>\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header={TempInside}\n          text=\"Temperature Inside (C)\"\n          style={{ height: \"80px\" }}\n        ></CWidgetDropdown>\n      </CCol>\n    </>\n  );\n};\n\nexport default TempInsideWidget;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport ChartBarSimple from \"../charts/ChartLineSimple\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nconst TempOutsideWidget = () => {\n  let [TempOut, setTempOut] = useState(0);\n\n  useEffect(() => {\n    socket.on(\"DataStream\", (data) => {\n      setTempOut((TempOut = data.TempOut));\n    });\n  });\n\n  // render\n  return (\n    <>\n      <CCol>\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header={TempOut}\n          text=\"Temperature Outside (C)\"\n          style={{ height: \"80px\" }}\n        ></CWidgetDropdown>\n      </CCol>\n    </>\n  );\n};\n\nexport default TempOutsideWidget;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport ChartBarSimple from \"../charts/ChartLineSimple\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nconst NodeCountWidget = () => {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    socket.on(\"nodeCount\", (data) => {\n      setCount((count = data.value));\n    });\n  });\n\n  // render\n  return (\n    <>\n      <CCol>\n        <CWidgetDropdown\n          color=\"gradient-success\"\n          header={count}\n          text=\"Nodes Connected\"\n          style={{ height: \"80px\" }}\n        ></CWidgetDropdown>\n      </CCol>\n    </>\n  );\n};\n\nexport default NodeCountWidget;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CFormCheck,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport ChartBarSimple from \"../charts/ChartLineSimple\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nconst WindowPositionWidget = () => {\n  let [count, setCount] = useState(\"Closed\");\n\n  useEffect(() => {\n    socket.on(\"window\", (data) => {\n      if (data.value == \"1\") {\n        setCount((count = \"Open\"));\n      } else if (data.value == \"0\") {\n        setCount((count = \"Closed\"));\n      }\n    });\n  });\n\n  // render\n  return (\n    <>\n      <CCol>\n        <CWidgetDropdown\n          color=\"gradient-info\"\n          header={count}\n          text=\"Window Position\"\n          style={{ height: \"80px\", verticalAlign: \"top\" }}\n        ></CWidgetDropdown>\n      </CCol>\n    </>\n  );\n};\n\nexport default WindowPositionWidget;\n","import React, { useState, useEffect } from \"react\";\nimport Switch from \"react-switch\";\nimport \"../../scss/_custom.scss\";\nimport io from \"socket.io-client\";\n\nconst socket = io.connect(\"https://iot.syedsuhaibshah.com\", {\n  transports: [\"websocket\", \"polling\"],\n  reconnect: true,\n});\n\nconst ManualOverride = () => {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n\n  useEffect(() => {\n    socket.on(\"connect\", function (socket) {\n      console.log(\"Client connected\");\n    });\n    let Status = { LED: false };\n\n    if (checked) {\n      Status.Override = true;\n    } else {\n      Status.Override = false;\n    }\n\n    socket.emit(\"Override\", \"Node1\", Status);\n    // Update the document title using the browser API\n  });\n\n  return (\n    <div className=\"example\">\n      <label>\n        <Switch\n          onChange={handleChange}\n          checked={checked}\n          className=\"react-switch\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default ManualOverride;\n","import React, { lazy } from 'react'\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCol,\n    CRow,\n    CDropdown,\n    CDropdownMenu,\n    CDropdownItem,\n    CDropdownToggle,\n    CWidgetDropdown,\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\nimport ChartLineSimple from '../charts/ChartLineSimple'\nimport ChartBarSimple from '../charts/ChartBarSimple'\n\nimport LEDSwitch from '../Commands/LEDSwitch'\n\n// import TemperatureIn from '../CustomCharts/TemperatureIn copy'\n// import TemperatureOut from '../CustomCharts/TemperatureOut'\nimport LightIn from '../CustomCharts/LightIn'\nimport LightOut from '../CustomCharts/LightOut'\n\n// import LightInsideWidget from '../widgets/LightInsideWidget'\n// import LightOutsideWidget from '../widgets/LightOutsideWidget'\n\nimport TempInsideWidget from '../widgets/TempInsideWidget'\nimport TempOutsideWidget from '../widgets/TempOutsideWidget'\nimport NodeCountWidget from '../widgets/NodeCountWidget'\nimport WindowPositionWidget from '../widgets/WindowPositionWidget'\nimport ManualOverride from '../Commands/ManualOverride'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst moment = require('moment')\n\nconst Dashboard = () => {\n    return (\n        <>\n            {/* This section is where all of the widgets go (i.e. line health, alarms, power consumption) */}\n            <CRow>\n                <CCol sm=\"4\" lg=\"2\">\n                    <WindowPositionWidget />\n                </CCol>\n                <CCol sm=\"4\" lg=\"2\">\n                    <TempInsideWidget />\n                </CCol>\n\n                <CCol sm=\"4\" lg=\"2\">\n                    <TempOutsideWidget />\n                </CCol>\n\n                <CCol sm=\"4\" lg=\"2\">\n                    <NodeCountWidget />\n                </CCol>\n\n                <CCol sm=\"4\" lg=\"2\">\n                    <CCard>\n                        <CCardBody style={{ verticalAlign: 'middle' }}>\n                            <CRow>\n                                <CCol>\n                                    <h4\n                                        id=\"traffic\"\n                                        className=\"card-title mb-0\"\n                                        style={{ fontSize: '16px', verticalAlign: 'middle' }}\n                                    >\n                                        Override\n                                    </h4>\n                                </CCol>\n\n                                <CCol>\n                                    <ManualOverride />\n                                </CCol>\n                            </CRow>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n\n                <CCol sm=\"4\" lg=\"2\">\n                    <CCard>\n                        <CCardBody>\n                            <CRow style={{ verticalAlign: 'middle' }}>\n                                <CCol sm=\"6\" lg=\"7\">\n                                    <h4\n                                        id=\"traffic\"\n                                        className=\"card-title mb-0\"\n                                        style={{ fontSize: '16px', verticalAlign: 'middle' }}\n                                    >\n                                        Open Window\n                                    </h4>\n                                </CCol>\n\n                                <CCol>\n                                    <LEDSwitch />\n                                </CCol>\n                            </CRow>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n\n            <CRow>\n                <CCol sm=\"6\" lg=\"6\">\n                    <CCard>\n                        <CCardBody>\n                            <CRow>\n                                <CCol sm=\"5\">\n                                    <h4 id=\"traffic\" className=\"card-title mb-0\">\n                                        Light Intensity Inside\n                                    </h4>\n                                </CCol>\n                                {/*\n                                <CCol sm=\"7\" className=\"d-none d-md-block\">\n                                    <CButton color=\"primary\" className=\"float-right\">\n                                        <CIcon name=\"cil-cloud-download\" />\n                                    </CButton>\n                                </CCol>\n                                */}\n                            </CRow>\n                            <LightIn />\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n\n                <CCol sm=\"6\" lg=\"6\">\n                    <CCard>\n                        <CCardBody>\n                            <CRow>\n                                <CCol sm=\"5\">\n                                    <h4 id=\"traffic\" className=\"card-title mb-0\">\n                                        Light Intensity Outside\n                                    </h4>\n                                </CCol>\n                                {/*\n                                <CCol sm=\"7\" className=\"d-none d-md-block\">\n                                    <CButton color=\"primary\" className=\"float-right\">\n                                        <CIcon name=\"cil-cloud-download\" />\n                                    </CButton>\n                                </CCol>\n                                */}\n                            </CRow>\n                            <LightOut />\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </>\n    )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}