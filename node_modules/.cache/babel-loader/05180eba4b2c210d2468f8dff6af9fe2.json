{"ast":null,"code":"import _regeneratorRuntime from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors ori.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar SampleChart = function SampleChart() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState([{\n    x: [],\n    y: [],\n    type: \"scatter\",\n    marker: {\n      color: \"red\"\n    }\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetchedData = _useState2[0],\n      setfetchedData = _useState2[1];\n\n  function DbForm1() {\n    _s();\n\n    var _useForm = useForm(),\n        register = _useForm.register,\n        errors = _useForm.formState.errors;\n\n    var _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        startDate = _useState4[0],\n        setStartDate = _useState4[1]; //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n\n\n    var convertDate = function convertDate() {\n      var str = startDate.toString();\n      var parts = str.split(\" \");\n      var months = {\n        Jan: \"01\",\n        Feb: \"02\",\n        Mar: \"03\",\n        Apr: \"04\",\n        May: \"05\",\n        Jun: \"06\",\n        Jul: \"07\",\n        Aug: \"08\",\n        Sep: \"09\",\n        Oct: \"10\",\n        Nov: \"11\",\n        Dec: \"12\"\n      };\n      return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n    };\n\n    function fetchData(_x) {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(data.Node);\n                console.log(convertDate(startDate));\n                console.log(\"The Submit button was clicked\");\n                axios.get(\"http://127.0.0.1:9000/data?node=\".concat(toString(data.Node), \"&date=\").concat(convertDate(startDate))).then(function (response) {\n                  //Data coming in from API, should be sent to create the chart.\n                  console.log(response);\n                  setfetchedData({\n                    x: response.time,\n                    y: response.data\n                  });\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    ;\n    useEffect(function () {\n      fetchData();\n    }, []);\n\n    var handleSubmit = function handleSubmit(e) {\n      e.preventDefault();\n      fetchData();\n    }; //This is where I push data from the response .\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CCard, {\n        children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n          children: \"Review Past Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(CRow, {\n              children: [/*#__PURE__*/_jsxDEV(CCol, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Node: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register(\"Node\")), {}, {\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"1\",\n                    children: \"1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"2\",\n                    children: \"2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"3\",\n                    children: \"3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"4\",\n                    children: \"4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"5\",\n                    children: \"5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"6\",\n                    children: \"6\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 15\n                  }, this)]\n                }), void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Select the Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  selected: startDate,\n                  onChange: function onChange(date) {\n                    return setStartDate(date);\n                  },\n                  dateFormat: \"MM/dd/yyyy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(CCol, {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n          children: /*#__PURE__*/_jsxDEV(Plot, {\n            data: [{\n              x: [],\n              y: [],\n              type: \"scatter\",\n              marker: {\n                color: \"red\"\n              }\n            }],\n            useResizeHandler: true,\n            style: {\n              width: \"100%\",\n              height: \"100%\"\n            },\n            graphDiv: \"graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this);\n  }\n\n  _s(DbForm1, \"/bKp51VdR+W2e9jNJDXLBxszbjY=\", false, function () {\n    return [useForm];\n  });\n};\n\n_s2(SampleChart, \"tJgn4zab2sPrHTUq/CM/VLEYQwo=\");\n\n_c = SampleChart;\nexport default SampleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SampleChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors ori.js"],"names":["React","useEffect","useState","createRef","classNames","useForm","DatePicker","CRow","CCol","CCard","CCardHeader","CCardBody","rgbToHex","DocsLink","axios","Plot","SampleChart","x","y","type","marker","color","fetchedData","setfetchedData","DbForm1","register","errors","formState","Date","startDate","setStartDate","convertDate","str","toString","parts","split","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","fetchData","data","console","log","Node","get","then","response","time","catch","error","handleSubmit","e","preventDefault","date","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst SampleChart = () => {\n\n  const [fetchedData, setfetchedData] = useState(\n    [\n      {\n        x: [],\n        y: [],\n        type: \"scatter\",\n        marker: { color: \"red\" },\n      },\n    ]\n  );\n\n  function DbForm1() {\n    \n    const {\n      register,\n      formState: { errors },\n    } = useForm();\n\n    const [startDate, setStartDate] = useState(new Date());\n    \n    //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n    const convertDate = () => {\n      let str = startDate.toString();\n      let parts = str.split(\" \");\n      let months = {\n        Jan: \"01\",\n        Feb: \"02\",\n        Mar: \"03\",\n        Apr: \"04\",\n        May: \"05\",\n        Jun: \"06\",\n        Jul: \"07\",\n        Aug: \"08\",\n        Sep: \"09\",\n        Oct: \"10\",\n        Nov: \"11\",\n        Dec: \"12\",\n      };\n      return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n    };\n\n    async function fetchData (data){\n\n      console.log(data.Node);\n      console.log(convertDate(startDate));\n      console.log(\"The Submit button was clicked\");\n      \n      axios\n        .get(`http://127.0.0.1:9000/data?node=${toString(data.Node)}&date=${convertDate(startDate)}`)\n        .then((response) => {\n          //Data coming in from API, should be sent to create the chart.\n          console.log(response);\n          setfetchedData({\n            x:response.time,\n            y:response.data\n          })\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    fetchData()\n  }\n  \n\n  //This is where I push data from the response .\n\n  return (\n    <div>\n      <CCard>\n        <CCardHeader>Review Past Data</CCardHeader>\n        <CCardBody>\n        <form onSubmit={handleSubmit}>\n        <CRow>\n          <CCol>\n            <label>Node: </label>\n            <select {...register(\"Node\")}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n              <option value=\"6\">6</option>\n            </select>\n          </CCol>\n          <CCol>\n            <label>Select the Date</label>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              dateFormat=\"MM/dd/yyyy\"\n            />\n          </CCol>\n          <CCol>\n            <input type=\"submit\" />\n          </CCol>\n        </CRow>\n      </form>\n\n        </CCardBody>\n        <CCardHeader></CCardHeader>\n        <CCardBody>\n          <Plot\n            data={[\n              {\n                x: [],\n                y: [],\n                type: \"scatter\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            graphDiv=\"graph\"\n          />\n        </CCardBody>\n      </CCard>\n    </div>\n  );\n  }\n};\n\nexport default SampleChart;\n"]},"metadata":{},"sourceType":"module"}