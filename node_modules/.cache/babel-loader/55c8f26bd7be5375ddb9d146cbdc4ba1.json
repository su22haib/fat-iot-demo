{"ast":null,"code":"var _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/charts/plotlyAnalog.js\",\n    _this = this;\n\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client'; //======================Socket Setup==========================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n}); //=====================Section End============================\n\nvar SampleChart = function SampleChart() {\n  //This is where I collect data over socket and put in an array.\n  // const [data, setData] = useState([]);\n  // // 1. listen for a Analog event and update the state.\n  // useEffect(() => {\n  //     socket.on('ana', Analog => {\n  //         // setData(currentData => [...currentData, Analog]);\n  //     });\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: [{\n      x: [1, 2, 3],\n      y: [2, 6, 2],\n      //type: 'scatter',\n      mode: 'lines',\n      marker: {\n        color: 'red'\n      }\n    }, {\n      x: [2, 2, 4],\n      y: [2, 6, 2],\n      //type: 'scatter',\n      mode: 'lines',\n      marker: {\n        color: 'red'\n      }\n    }],\n    layout: {\n      width: 800,\n      height: 400,\n      title: 'Sample Chart'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, _this);\n};\n\n_c = SampleChart;\nexport default SampleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SampleChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/charts/plotlyAnalog.js"],"names":["React","Plot","io","socket","transports","SampleChart","x","y","mode","marker","color","width","height","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAGA;;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACvCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD2B,CAA1B,CAAjB,C,CAIA;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAK;AAErB;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACI,sBACI,QAAC,IAAD;AACI,IAAA,IAAI,EAAI,CACJ;AACIC,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADP;AAEIC,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFP;AAGI;AACAC,MAAAA,IAAI,EAAE,OAJV;AAKIC,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AALZ,KADI,EAOM;AACVJ,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADO;AAEVC,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFO;AAGV;AACAC,MAAAA,IAAI,EAAE,OAJI;AAKVC,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AALE,KAPN,CADZ;AAgBA,IAAA,MAAM,EAAI;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE,GAArB;AAA0BC,MAAAA,KAAK,EAAC;AAAhC;AAhBV;AAAA;AAAA;AAAA;AAAA,WADJ;AAoBP,CAjCD;;KAAMR,W;AAmCN,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client';\n\n\n//======================Socket Setup==========================\n\nconst socket = io(\"http://localhost:3001\", {\n    transports: ['websocket', 'polling']\n});\n    \n//=====================Section End============================\n\n\n\nconst SampleChart = ()=> {\n    \n    //This is where I collect data over socket and put in an array.\n    // const [data, setData] = useState([]);\n\n    // // 1. listen for a Analog event and update the state.\n    // useEffect(() => {\n\n    //     socket.on('ana', Analog => {\n\n    //         // setData(currentData => [...currentData, Analog]);\n    //     });\n    // }, []);\n        return(\n            <Plot \n                data = {[\n                    {\n                        x: [1,2,3],\n                        y: [2,6,2],\n                        //type: 'scatter',\n                        mode: 'lines',\n                        marker: {color: 'red'},\n                },            {\n                    x: [2,2,4],\n                    y: [2,6,2],\n                    //type: 'scatter',\n                    mode: 'lines',\n                    marker: {color: 'red'},\n            }\n            ]}\n            layout = {{width: 800, height: 400, title:'Sample Chart'}}\n            />\n        );\n}\n\nexport default SampleChart;"]},"metadata":{},"sourceType":"module"}