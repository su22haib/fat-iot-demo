{"ast":null,"code":"import _objectSpread from \"/home/suhaib/Desktop/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/suhaib/Desktop/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/remote-monitoring-master/src/views/charts/MainChartExample.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\nimport Firebase from \"src/firebase\";\nimport moment from \"moment\"; // const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// const brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar brandDanger = getStyle(\"danger\") || \"#f86c6b\";\nvar brandWarning = getStyle('warngin') || '#f9b115';\n\nvar MainChartExample = function MainChartExample(attributes) {\n  _s();\n\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      temperatureArr = _useState2[0],\n      setTemperatureArr = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      humidityArr = _useState4[0],\n      setHumidityArr = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      labels = _useState6[0],\n      setLabels = _useState6[1];\n\n  useEffect(function () {\n    var unsubscribe = Firebase.firestore().collection(\"SensorReadings\").orderBy(\"timeStamp\").onSnapshot(function (snapshot) {\n      var dumTemp = [];\n      var dumHum = [];\n      var dumLabel = [];\n\n      if (snapshot.size) {\n        snapshot.forEach(function (doc) {\n          dumTemp.push(doc.data().temperature);\n          dumHum.push(doc.data().humidity);\n          dumLabel.push(moment(doc.data().timeStamp.toDate()).format(\"DD/MM/YYYY HH:MM:SS\"));\n        });\n        setHumidityArr(dumHum);\n        setTemperatureArr(dumTemp);\n        setLabels(dumLabel);\n      } else {\n        console.log(\"NO DATA\");\n      }\n    });\n    console.log(temperatureArr);\n    console.log(humidityArr);\n    return function () {\n      unsubscribe();\n    };\n  }, [Firebase]);\n\n  var defaultDatasets = function () {\n    var elements = 27;\n    var data1 = [];\n    var data2 = [];\n    var data3 = [];\n\n    for (var i = 0; i <= elements; i++) {\n      data1.push(random(50, 200));\n      data2.push(random(80, 100));\n      data3.push(65);\n    }\n\n    return [// {\n    //   label: 'My First dataset',\n    //   backgroundColor: hexToRgba(brandInfo, 10),\n    //   borderColor: brandInfo,\n    //   pointHoverBackgroundColor: brandInfo,\n    //   borderWidth: 2,\n    //   data: data1\n    // },\n    {\n      label: \"Temperature Degree Celcius\",\n      backgroundColor: \"transparent\",\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: brandDanger,\n      borderWidth: 2,\n      data: temperatureArr\n    }, {\n      label: \"Humidity\",\n      backgroundColor: \"transparent\",\n      borderColor: brandWarning,\n      pointHoverBackgroundColor: brandWarning,\n      borderWidth: 1,\n      borderDash: [8, 5],\n      data: humidityArr\n    }];\n  }();\n\n  var defaultOptions = function () {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            stepSize: 5,\n            max: 110\n          },\n          gridLines: {\n            display: true\n          }\n        }]\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n  }(); // render\n\n\n  return /*#__PURE__*/_jsxDEV(CChartLine, _objectSpread(_objectSpread({}, attributes), {}, {\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: labels\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MainChartExample, \"x9141yIjNUViOZr4dnHk3pHq/nQ=\");\n\n_c = MainChartExample;\nexport default MainChartExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainChartExample\");","map":{"version":3,"sources":["/home/suhaib/Desktop/remote-monitoring-master/src/views/charts/MainChartExample.js"],"names":["React","useEffect","useState","CChartLine","getStyle","hexToRgba","Firebase","moment","brandDanger","brandWarning","MainChartExample","attributes","random","min","max","Math","floor","temperatureArr","setTemperatureArr","humidityArr","setHumidityArr","labels","setLabels","unsubscribe","firestore","collection","orderBy","onSnapshot","snapshot","dumTemp","dumHum","dumLabel","size","forEach","doc","push","data","temperature","humidity","timeStamp","toDate","format","console","log","defaultDatasets","elements","data1","data2","data3","i","label","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","borderDash","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","stepSize","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,eAApC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;AACA;;;AACA,IAAMC,WAAW,GAAGJ,QAAQ,CAAC,QAAD,CAAR,IAAsB,SAA1C;AACA,IAAMK,YAAY,GAAGL,QAAQ,CAAC,SAAD,CAAR,IAAuB,SAA5C;;AAEA,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAgB;AAAA;;AACvC,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,MAAL,MAAiBE,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,GAFD;;AADuC,kBAKKX,QAAQ,CAAC,EAAD,CALb;AAAA;AAAA,MAKhCe,cALgC;AAAA,MAKhBC,iBALgB;;AAAA,mBAMDhB,QAAQ,CAAC,EAAD,CANP;AAAA;AAAA,MAMhCiB,WANgC;AAAA,MAMnBC,cANmB;;AAAA,mBAOXlB,QAAQ,CAAC,EAAD,CAPG;AAAA;AAAA,MAOhCmB,MAPgC;AAAA,MAOxBC,SAPwB;;AASvCrB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMsB,WAAW,GAAGjB,QAAQ,CAACkB,SAAT,GACjBC,UADiB,CACN,gBADM,EAEjBC,OAFiB,CAET,WAFS,EAGjBC,UAHiB,CAGN,UAACC,QAAD,EAAc;AACxB,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,UAAIH,QAAQ,CAACI,IAAb,EAAmB;AACjBJ,QAAAA,QAAQ,CAACK,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBL,UAAAA,OAAO,CAACM,IAAR,CAAaD,GAAG,CAACE,IAAJ,GAAWC,WAAxB;AACAP,UAAAA,MAAM,CAACK,IAAP,CAAYD,GAAG,CAACE,IAAJ,GAAWE,QAAvB;AACAP,UAAAA,QAAQ,CAACI,IAAT,CACE5B,MAAM,CAAC2B,GAAG,CAACE,IAAJ,GAAWG,SAAX,CAAqBC,MAArB,EAAD,CAAN,CAAsCC,MAAtC,CACE,qBADF,CADF;AAKD,SARD;AASArB,QAAAA,cAAc,CAACU,MAAD,CAAd;AACAZ,QAAAA,iBAAiB,CAACW,OAAD,CAAjB;AACAP,QAAAA,SAAS,CAACS,QAAD,CAAT;AACD,OAbD,MAaO;AACLW,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,KAvBiB,CAApB;AAwBAD,IAAAA,OAAO,CAACC,GAAR,CAAY1B,cAAZ;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,WAAZ;AACA,WAAO,YAAM;AACXI,MAAAA,WAAW;AACZ,KAFD;AAGD,GA9BQ,EA8BN,CAACjB,QAAD,CA9BM,CAAT;;AAgCA,MAAMsC,eAAe,GAAI,YAAM;AAC7B,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,QAArB,EAA+BI,CAAC,EAAhC,EAAoC;AAClCH,MAAAA,KAAK,CAACX,IAAN,CAAWvB,MAAM,CAAC,EAAD,EAAK,GAAL,CAAjB;AACAmC,MAAAA,KAAK,CAACZ,IAAN,CAAWvB,MAAM,CAAC,EAAD,EAAK,GAAL,CAAjB;AACAoC,MAAAA,KAAK,CAACb,IAAN,CAAW,EAAX;AACD;;AACD,WAAO,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,MAAAA,KAAK,EAAE,4BADT;AAEEC,MAAAA,eAAe,EAAE,aAFnB;AAGEC,MAAAA,WAAW,EAAE5C,WAHf;AAIE6C,MAAAA,yBAAyB,EAAE7C,WAJ7B;AAKE8C,MAAAA,WAAW,EAAE,CALf;AAMElB,MAAAA,IAAI,EAAEnB;AANR,KATK,EAiBL;AACEiC,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,eAAe,EAAE,aAFnB;AAGEC,MAAAA,WAAW,EAAE3C,YAHf;AAIE4C,MAAAA,yBAAyB,EAAE5C,YAJ7B;AAKE6C,MAAAA,WAAW,EAAE,CALf;AAMEC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CANd;AAOEnB,MAAAA,IAAI,EAAEjB;AAPR,KAjBK,CAAP;AA2BD,GArCuB,EAAxB;;AAuCA,MAAMqC,cAAc,GAAI,YAAM;AAC5B,WAAO;AACLC,MAAAA,mBAAmB,EAAE,KADhB;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AADH,OAFH;AAKLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,SAAS,EAAE;AACTC,YAAAA,eAAe,EAAE;AADR;AADb,SADK,CADD;AAQNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,KAAK,EAAE;AACLC,YAAAA,WAAW,EAAE,IADR;AAELC,YAAAA,QAAQ,EAAE,CAFL;AAGLrD,YAAAA,GAAG,EAAE;AAHA,WADT;AAMEgD,UAAAA,SAAS,EAAE;AACTH,YAAAA,OAAO,EAAE;AADA;AANb,SADK;AARD,OALH;AA0BLd,MAAAA,QAAQ,EAAE;AACRuB,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,CADH;AAELC,UAAAA,SAAS,EAAE,EAFN;AAGLC,UAAAA,WAAW,EAAE,CAHR;AAILC,UAAAA,gBAAgB,EAAE;AAJb;AADC;AA1BL,KAAP;AAmCD,GApCsB,EAAvB,CAhFuC,CAsHvC;;;AACA,sBACE,QAAC,UAAD,kCACM7D,UADN;AAEE,IAAA,QAAQ,EAAEiC,eAFZ;AAGE,IAAA,OAAO,EAAEY,cAHX;AAIE,IAAA,MAAM,EAAEnC;AAJV;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CA/HD;;GAAMX,gB;;KAAAA,gB;AAiIN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\nimport Firebase from \"src/firebase\";\nimport moment from \"moment\";\n\n// const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// const brandInfo = getStyle(\"info\") || \"#20a8d8\";\nconst brandDanger = getStyle(\"danger\") || \"#f86c6b\";\nconst brandWarning = getStyle('warngin') || '#f9b115'\n\nconst MainChartExample = (attributes) => {\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const [temperatureArr, setTemperatureArr] = useState([]);\n  const [humidityArr, setHumidityArr] = useState([]);\n  const [labels, setLabels] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = Firebase.firestore()\n      .collection(\"SensorReadings\")\n      .orderBy(\"timeStamp\")\n      .onSnapshot((snapshot) => {\n        let dumTemp = [];\n        let dumHum = [];\n        let dumLabel = [];\n        if (snapshot.size) {\n          snapshot.forEach((doc) => {\n            dumTemp.push(doc.data().temperature);\n            dumHum.push(doc.data().humidity);\n            dumLabel.push(\n              moment(doc.data().timeStamp.toDate()).format(\n                \"DD/MM/YYYY HH:MM:SS\"\n              )\n            );\n          });\n          setHumidityArr(dumHum);\n          setTemperatureArr(dumTemp);\n          setLabels(dumLabel);\n        } else {\n          console.log(\"NO DATA\");\n        }\n      });\n    console.log(temperatureArr);\n    console.log(humidityArr);\n    return () => {\n      unsubscribe();\n    };\n  }, [Firebase]);\n\n  const defaultDatasets = (() => {\n    let elements = 27;\n    const data1 = [];\n    const data2 = [];\n    const data3 = [];\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200));\n      data2.push(random(80, 100));\n      data3.push(65);\n    }\n    return [\n      // {\n      //   label: 'My First dataset',\n      //   backgroundColor: hexToRgba(brandInfo, 10),\n      //   borderColor: brandInfo,\n      //   pointHoverBackgroundColor: brandInfo,\n      //   borderWidth: 2,\n      //   data: data1\n      // },\n      {\n        label: \"Temperature Degree Celcius\",\n        backgroundColor: \"transparent\",\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 2,\n        data: temperatureArr,\n      },\n      {\n        label: \"Humidity\",\n        backgroundColor: \"transparent\",\n        borderColor: brandWarning,\n        pointHoverBackgroundColor: brandWarning,\n        borderWidth: 1,\n        borderDash: [8, 5],\n        data: humidityArr,\n      },\n    ];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              drawOnChartArea: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              stepSize: 5,\n              max: 110,\n            },\n            gridLines: {\n              display: true,\n            },\n          },\n        ],\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3,\n        },\n      },\n    };\n  })();\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={labels}\n    />\n  );\n};\n\nexport default MainChartExample;\n"]},"metadata":{},"sourceType":"module"}