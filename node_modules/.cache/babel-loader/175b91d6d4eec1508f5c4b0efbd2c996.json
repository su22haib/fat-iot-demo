{"ast":null,"code":"import _objectSpread from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring-master/src/views/charts/MainChartExample.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\"; //import Firebase from \"src/firebase\";\n\nimport moment from \"moment\";\nimport io from 'socket.io-client'; //======================Socket Setup=================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n}); //=====================Section End===================\n// const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// const brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nvar brandDanger = getStyle(\"danger\") || \"#f86c6b\";\nvar brandWarning = getStyle('warning') || '#f9b115';\n\nvar MainChartExample = function MainChartExample(attributes) {\n  _s();\n\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }; // const [temperatureArr, setTemperatureArr] = useState([]);\n  // const [humidityArr, setHumidityArr] = useState([]);\n\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      labels = _useState2[0],\n      setLabels = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1]; // const unsubscribe = Firebase.firestore()\n  //   .collection(\"SensorReadings\")\n  //   .orderBy(\"timeStamp\")\n  //   .onSnapshot((snapshot) => {\n  //     let dumTemp = [];\n  //     let dumHum = [];\n  //     let dumLabel = [];\n  //     if (snapshot.size) {\n  //       snapshot.forEach((doc) => {\n  //         dumTemp.push(doc.data().temperature);\n  //         dumHum.push(doc.data().humidity);\n  //         dumLabel.push(\n  //           moment(doc.data().timeStamp.toDate()).format(\n  //             \"DD/MM/YYYY HH:MM:SS\"\n  //           )\n  //         );\n  //       });\n  //       setHumidityArr(dumHum);\n  //       setTemperatureArr(dumTemp);\n  //       setLabels(dumLabel);\n\n\n  useEffect(function () {\n    socket.on('temp', function (temperature) {\n      setData(function (currentData) {\n        return [].concat(_toConsumableArray(currentData), [temperature]);\n      });\n    });\n  }, []);\n\n  var defaultDatasets = function () {\n    var elements = 27;\n    var data1 = [];\n    var data2 = [];\n    var data3 = [];\n\n    for (var i = 0; i <= elements; i++) {\n      data1.push(random(50, 200));\n      data2.push(random(80, 100));\n      data3.push(65);\n    }\n\n    return [// {\n    //   label: 'My First dataset',\n    //   backgroundColor: hexToRgba(brandInfo, 10),\n    //   borderColor: brandInfo,\n    //   pointHoverBackgroundColor: brandInfo,\n    //   borderWidth: 2,\n    //   data: data1\n    // },\n    {\n      label: \"Temperature Degree Celsius\",\n      backgroundColor: \"transparent\",\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: brandDanger,\n      borderWidth: 2,\n      data: data\n    } // {\n    //   label: \"Humidity\",\n    //   backgroundColor: \"transparent\",\n    //   borderColor: brandWarning,\n    //   pointHoverBackgroundColor: brandWarning,\n    //   borderWidth: 1,\n    //   borderDash: [8, 5],\n    //   data: humidityArr,\n    // },\n    ];\n  }();\n\n  var defaultOptions = function () {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            stepSize: 5,\n            max: 110\n          },\n          gridLines: {\n            display: true\n          }\n        }]\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n  }(); // render\n\n\n  return /*#__PURE__*/_jsxDEV(CChartLine, _objectSpread(_objectSpread({}, attributes), {}, {\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: labels\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MainChartExample, \"Rf8YF3g86PNQpVCkJbfRfG1GbRk=\");\n\n_c = MainChartExample;\nexport default MainChartExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainChartExample\");","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring-master/src/views/charts/MainChartExample.js"],"names":["React","useEffect","useState","CChartLine","getStyle","hexToRgba","moment","io","socket","transports","brandDanger","brandWarning","MainChartExample","attributes","random","min","max","Math","floor","labels","setLabels","data","setData","on","temperature","currentData","defaultDatasets","elements","data1","data2","data3","i","push","label","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","stepSize","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\n//import Firebase from \"src/firebase\";\nimport moment from \"moment\";\nimport io from 'socket.io-client';\n\n\n//======================Socket Setup=================\n\nconst socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n});\n\n\n//=====================Section End===================\n\n\n// const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// const brandInfo = getStyle(\"info\") || \"#20a8d8\";\nconst brandDanger = getStyle(\"danger\") || \"#f86c6b\";\nconst brandWarning = getStyle('warning') || '#f9b115'\n\nconst MainChartExample = (attributes) => {\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // const [temperatureArr, setTemperatureArr] = useState([]);\n  // const [humidityArr, setHumidityArr] = useState([]);\n  const [labels, setLabels] = useState([]);\n\n  const [data, setData] = useState([]);\n\n  \n    // const unsubscribe = Firebase.firestore()\n    //   .collection(\"SensorReadings\")\n    //   .orderBy(\"timeStamp\")\n    //   .onSnapshot((snapshot) => {\n    //     let dumTemp = [];\n    //     let dumHum = [];\n    //     let dumLabel = [];\n    //     if (snapshot.size) {\n    //       snapshot.forEach((doc) => {\n    //         dumTemp.push(doc.data().temperature);\n    //         dumHum.push(doc.data().humidity);\n    //         dumLabel.push(\n    //           moment(doc.data().timeStamp.toDate()).format(\n    //             \"DD/MM/YYYY HH:MM:SS\"\n    //           )\n    //         );\n    //       });\n    //       setHumidityArr(dumHum);\n    //       setTemperatureArr(dumTemp);\n    //       setLabels(dumLabel);\n\n    \n    \n    useEffect(()=>{\n      socket.on('temp', temperature =>{\n        setData(currentData =>[...currentData, temperature]);\n      });\n    }, []);\n    \n      \n  \n\n  const defaultDatasets = (() => {\n    let elements = 27;\n    const data1 = [];\n    const data2 = [];\n    const data3 = [];\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200));\n      data2.push(random(80, 100));\n      data3.push(65);\n    }\n    return [\n      // {\n      //   label: 'My First dataset',\n      //   backgroundColor: hexToRgba(brandInfo, 10),\n      //   borderColor: brandInfo,\n      //   pointHoverBackgroundColor: brandInfo,\n      //   borderWidth: 2,\n      //   data: data1\n      // },\n      {\n        label: \"Temperature Degree Celsius\",\n        backgroundColor: \"transparent\",\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 2,\n        data: data,\n      },\n      // {\n      //   label: \"Humidity\",\n      //   backgroundColor: \"transparent\",\n      //   borderColor: brandWarning,\n      //   pointHoverBackgroundColor: brandWarning,\n      //   borderWidth: 1,\n      //   borderDash: [8, 5],\n      //   data: humidityArr,\n      // },\n    ];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              drawOnChartArea: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              stepSize: 5,\n              max: 110,\n            },\n            gridLines: {\n              display: true,\n            },\n          },\n        ],\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3,\n        },\n      },\n    };\n  })();\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={labels}\n    />\n  );\n};\n\nexport default MainChartExample;\n"]},"metadata":{},"sourceType":"module"}