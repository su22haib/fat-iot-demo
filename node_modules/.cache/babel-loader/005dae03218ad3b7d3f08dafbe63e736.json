{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/TemperatureIn copy.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io('http://localhost:9000', {\n  transports: ['websocket', 'polling']\n});\n\nvar TemperatureIn = /*#__PURE__*/function (_React$Component) {\n  _inherits(TemperatureIn, _React$Component);\n\n  var _super = _createSuper(TemperatureIn);\n\n  function TemperatureIn() {\n    var _this;\n\n    _classCallCheck(this, TemperatureIn);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //Initial State of data\n      xValue: [],\n      yValue: [],\n      data: [{\n        x: [],\n        y: [],\n        name: 'Line 1',\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }],\n      layout: {\n        datarevision: 0\n      },\n      revision: 0,\n      time: ''\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var TempIn = _ref.TempIn,\n          time = _ref.time;\n      //Incoming data is passed as an object.\n      var _this$state = _this.state,\n          layout = _this$state.layout,\n          revision = _this$state.revision,\n          data = _this$state.data,\n          xValue = _this$state.xValue,\n          yValue = _this$state.yValue; //Just uses the es6 destructuring.\n\n      xValue.push(time);\n      yValue.push(TempIn);\n      console.log('data', data[0].x);\n\n      var _data = Object.values(data);\n\n      _data[0].x = xValue;\n      _data[0].y = yValue;\n      console.log('DATA=>', _data); // line1.x.push(time);\n      // line1.y.push(value);\n      // line1.dummy.push(revision);\n      // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // let _revision = revision++;\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1,\n        data: _data\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(TemperatureIn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //This is where I make a DB request for the data so that its appended to the graph.\n      axios.get(\"http://127.0.0.1:9000/data?node=2&date=\".concat(moment().format('L'), \"&data=TempIn\")).then(function (res) {\n        console.log('RESRGAGFS', res.data); //To check if the correct data is coming in.\n\n        if (res.status === 200) {\n          //Need to figure out how to take this data and plot it on the graph.\n          console.log('y-axis' + res.data.values);\n          console.log('x-axis' + res.data.time);\n          var _this2$state = _this2.state,\n              layout = _this2$state.layout,\n              revision = _this2$state.revision,\n              data = _this2$state.data,\n              xValue = _this2$state.xValue,\n              yValue = _this2$state.yValue; //Just uses the es6 destructuring.\n\n          xValue.push(res.data.time);\n          yValue.push(res.data.values);\n\n          var _data1 = Object.values(data);\n\n          _data1[0].x = xValue;\n          _data1[0].y = yValue; //console.log('x-axis time array: ' + data[0].x)\n          //console.log('y-axis data array: ' + data[0].y)\n          // this.increaseGraphic({ , time })\n\n          _this2.setState({\n            revision: _this2.state.revision + 1,\n            data: _data1\n          });\n\n          layout.datarevision = _this2.state.revision + 1;\n        }\n      }).finally(function () {\n        socket.on('DataStream', function (data) {\n          //Data coming in from the socket being sent to increaseGraphic function\n          _this2.increaseGraphic(data);\n        }); //End of Socket subscription.\n      }); // setInterval(this.increaseGraphic, 1000)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: this.state.data,\n          layout: this.state.layout,\n          revision: this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return TemperatureIn;\n}(React.Component);\n\nexport { TemperatureIn as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/TemperatureIn copy.js"],"names":["React","Plot","io","axios","moment","socket","transports","TemperatureIn","state","xValue","yValue","data","x","y","name","type","mode","marker","color","layout","datarevision","revision","time","increaseGraphic","TempIn","push","console","log","_data","Object","values","setState","get","format","then","res","status","_data1","finally","on","width","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\nimport io from 'socket.io-client'\nimport axios from 'axios'\nimport moment from 'moment'\n\nconst socket = io('http://localhost:9000', {\n    transports: ['websocket', 'polling'],\n})\n\nexport default class TemperatureIn extends React.Component {\n    state = {\n        //Initial State of data\n        xValue: [],\n        yValue: [],\n        data: [\n            {\n                x: [],\n                y: [],\n                name: 'Line 1',\n                type: 'scatter',\n                mode: 'lines+markers',\n                marker: { color: 'red' },\n            },\n        ],\n        layout: {\n            datarevision: 0,\n        },\n        revision: 0,\n        time: '',\n    }\n\n    componentDidMount() {\n        //This is where I make a DB request for the data so that its appended to the graph.\n        axios\n            .get(`http://127.0.0.1:9000/data?node=2&date=${moment().format('L')}&data=TempIn`)\n            .then((res) => {\n                console.log('RESRGAGFS', res.data) //To check if the correct data is coming in.\n\n                if (res.status === 200) {\n                    //Need to figure out how to take this data and plot it on the graph.\n                    console.log('y-axis' + res.data.values)\n                    console.log('x-axis' + res.data.time)\n\n                    const { layout, revision, data, xValue, yValue } = this.state //Just uses the es6 destructuring.\n                    xValue.push(res.data.time)\n                    yValue.push(res.data.values)\n\n                    let _data1 = Object.values(data)\n                    _data1[0].x = xValue\n                    _data1[0].y = yValue\n\n                    //console.log('x-axis time array: ' + data[0].x)\n                    //console.log('y-axis data array: ' + data[0].y)\n\n                    // this.increaseGraphic({ , time })\n                    this.setState({ revision: this.state.revision + 1, data: _data1 })\n                    layout.datarevision = this.state.revision + 1\n                }\n            })\n            .finally(() => {\n                socket.on('DataStream', (data) => {\n                    //Data coming in from the socket being sent to increaseGraphic function\n                    this.increaseGraphic(data)\n                }) //End of Socket subscription.\n            })\n\n        // setInterval(this.increaseGraphic, 1000)\n    }\n\n    increaseGraphic = ({ TempIn, time }) => {\n        //Incoming data is passed as an object.\n        const { layout, revision, data, xValue, yValue } = this.state //Just uses the es6 destructuring.\n\n        xValue.push(time)\n        yValue.push(TempIn)\n\n        console.log('data', data[0].x)\n\n        let _data = Object.values(data)\n        _data[0].x = xValue\n        _data[0].y = yValue\n\n        console.log('DATA=>', _data)\n\n        // line1.x.push(time);\n        // line1.y.push(value);\n        // line1.dummy.push(revision);\n        // if (line1.x.length >= 10) {\n        //   line1.x.shift()\n        //   line1.y.shift()\n        // }\n        // let _revision = revision++;\n\n        // line2.x.push(this.rand())\n        // line2.y.push(this.rand())\n        // if (line2.x.length >= 10) {\n        //   line2.x.shift()\n        //   line2.y.shift()\n        // }\n\n        this.setState({ revision: this.state.revision + 1, data: _data })\n        layout.datarevision = this.state.revision + 1\n    }\n\n    render() {\n        return (\n            <div>\n                <Plot\n                    data={this.state.data}\n                    layout={this.state.layout}\n                    revision={this.state.revision}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    graphDiv=\"graph\"\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}