{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/Commands/LEDButton.js\";\nimport React, { Component } from \"react\";\nimport Switch from \"react-switch\";\n/* MQTT Configuration */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar mqtt = require(\"mqtt\");\n\nvar Broker_URL = \"mqtt://127.0.0.1\";\nvar options = {\n  clientId: \"LEDMQTT\",\n  port: 1883,\n  keepalive: 60\n};\n/* Section End */\n\nvar SwitchExample = /*#__PURE__*/function (_Component) {\n  _inherits(SwitchExample, _Component);\n\n  var _super = _createSuper(SwitchExample);\n\n  function SwitchExample() {\n    var _this;\n\n    _classCallCheck(this, SwitchExample);\n\n    _this = _super.call(this);\n    _this.state = {\n      checked: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SwitchExample, [{\n    key: \"handleChange\",\n    value: function handleChange(checked) {\n      this.setState({\n        checked: checked\n      }); //is this where i will write code to send an mqtt command?\n\n      var client = mqtt.connect(Broker_URL, options); //Callback Function connects to the broker.\n\n      var Topic = \"esp32/led\";\n      console.log(\"Connecting MQTT\"); //This callback function subscribes to the preset topic.\n\n      console.log(\"Subscribed to \" + Topic);\n\n      if (this.state.checked === true) {\n        var client = mqtt.connect(Broker_URL, options);\n        client.on('connect', function () {\n          client.subscribe('esp32/led', function (err) {\n            if (!err) {\n              client.publish('esp32/led', 'ON');\n            }\n          });\n        });\n      } else {\n        client.on('connect', function () {\n          client.subscribe('esp32/led', function (err) {\n            if (!err) {\n              client.publish('esp32/led', 'ON');\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          onChange: this.handleChange,\n          checked: this.state.checked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return SwitchExample;\n}(Component);\n\nexport default SwitchExample;","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/Commands/LEDButton.js"],"names":["React","Component","Switch","mqtt","require","Broker_URL","options","clientId","port","keepalive","SwitchExample","state","checked","handleChange","bind","setState","client","connect","Topic","console","log","on","subscribe","err","publish"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA;;;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,UAAU,GAAG,kBAAjB;AACA,IAAIC,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,SADE;AAEZC,EAAAA,IAAI,EAAE,IAFM;AAGZC,EAAAA,SAAS,EAAE;AAHC,CAAd;AAMA;;IAEMC,a;;;;;AACJ,2BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAHY;AAIb;;;;WAED,sBAAaF,OAAb,EAAsB;AACpB,WAAKG,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAPA;AAAF,OAAd,EADoB,CAGpB;;AACA,UAAII,MAAM,GAAGb,IAAI,CAACc,OAAL,CAAaZ,UAAb,EAAyBC,OAAzB,CAAb,CAJoB,CAMlB;;AACA,UAAIY,KAAK,GAAG,WAAZ;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EATkB,CAWhB;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,KAA/B;;AAEA,UAAG,KAAKP,KAAL,CAAWC,OAAX,KAAuB,IAA1B,EAA+B;AAC7B,YAAII,MAAM,GAAGb,IAAI,CAACc,OAAL,CAAaZ,UAAb,EAAyBC,OAAzB,CAAb;AACAU,QAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,YAAY;AAC/BL,UAAAA,MAAM,CAACM,SAAP,CAAiB,WAAjB,EAA8B,UAAUC,GAAV,EAAe;AAC3C,gBAAI,CAACA,GAAL,EAAU;AACRP,cAAAA,MAAM,CAACQ,OAAP,CAAe,WAAf,EAA4B,IAA5B;AACD;AACF,WAJD;AAKD,SAND;AAOD,OATD,MASK;AACHR,QAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,YAAY;AAC/BL,UAAAA,MAAM,CAACM,SAAP,CAAiB,WAAjB,EAA8B,UAAUC,GAAV,EAAe;AAC3C,gBAAI,CAACA,GAAL,EAAU;AACRP,cAAAA,MAAM,CAACQ,OAAP,CAAe,WAAf,EAA4B,IAA5B;AACD;AACF,WAJD;AAKD,SAND;AAOD;AAKN;;;WAED,kBAAS;AACP,0BACE;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,KAAKX,YAAvB;AAAqC,UAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC;AAAzD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;;;EAnDyBX,S;;AAsD5B,eAAeS,aAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Switch from \"react-switch\";\n\n/* MQTT Configuration */\n\nvar mqtt = require(\"mqtt\");\n\nvar Broker_URL = \"mqtt://127.0.0.1\";\nvar options = {\n  clientId: \"LEDMQTT\",\n  port: 1883,\n  keepalive: 60,\n};\n\n/* Section End */\n\nclass SwitchExample extends Component {\n  constructor() {\n    super();\n    this.state = { checked: false };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(checked) {\n    this.setState({ checked });\n    \n    //is this where i will write code to send an mqtt command?\n    var client = mqtt.connect(Broker_URL, options);\n    \n      //Callback Function connects to the broker.\n      var Topic = \"esp32/led\";\n    \n      console.log(\"Connecting MQTT\");\n      \n        //This callback function subscribes to the preset topic.\n        console.log(\"Subscribed to \" + Topic);\n\n        if(this.state.checked === true){\n          var client = mqtt.connect(Broker_URL, options);\n          client.on('connect', function () {\n            client.subscribe('esp32/led', function (err) {\n              if (!err) {\n                client.publish('esp32/led', 'ON')\n              }\n            })\n          })\n        }else{\n          client.on('connect', function () {\n            client.subscribe('esp32/led', function (err) {\n              if (!err) {\n                client.publish('esp32/led', 'ON')\n              }\n            })\n          })\n        }\n      \n    \n\n    \n  }\n\n  render() {\n    return (\n      <label>\n        <Switch onChange={this.handleChange} checked={this.state.checked} />\n      </label>\n    );\n  }\n}\n\nexport default SwitchExample;\n"]},"metadata":{},"sourceType":"module"}