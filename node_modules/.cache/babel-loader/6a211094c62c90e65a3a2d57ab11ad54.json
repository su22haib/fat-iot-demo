{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/LightOut.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client';\nimport moment from 'moment';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io('http://localhost:9000', {\n  transports: ['websocket', 'polling']\n});\n\nvar LightOut = /*#__PURE__*/function (_React$Component) {\n  _inherits(LightOut, _React$Component);\n\n  var _super = _createSuper(LightOut);\n\n  function LightOut() {\n    var _this;\n\n    _classCallCheck(this, LightOut);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //Initial State of data\n      xValue: [],\n      yValue: [],\n      data: [{\n        x: [],\n        y: [],\n        name: 'Line 1',\n        type: 'scatter',\n        mode: 'lines',\n        marker: {\n          color: 'blue'\n        }\n      }],\n      layout: {\n        datarevision: 0\n      },\n      revision: 0,\n      time: ''\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var _LightOut = _ref.LightOut,\n          time = _ref.time;\n      //Incoming data is passed as an object.\n      var _this$state = _this.state,\n          layout = _this$state.layout,\n          revision = _this$state.revision,\n          data = _this$state.data,\n          xValue = _this$state.xValue,\n          yValue = _this$state.yValue;\n      xValue.push(time);\n      yValue.push(_LightOut);\n      console.log('datat', data[0].x);\n\n      var _data = Object.values(data);\n\n      _data[0].x = xValue;\n      _data[0].y = yValue;\n      console.log('DATA=>', _data); // line1.x.push(time);\n      // line1.y.push(value);\n      // line1.dummy.push(revision);\n      // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // let _revision = revision++;\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1,\n        data: _data\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(LightOut, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"http://127.0.0.1:9000/data?node=2&date=\".concat(moment().format('L'), \"&data=LightOut\")).then(function (res) {\n        if (res.status === 200) {\n          //Need to figure out how to take this data and plot it on the graph.\n          console.log('y-axis' + res.data.values);\n          console.log('x-axis' + res.data.time);\n          var _this2$state = _this2.state,\n              layout = _this2$state.layout,\n              revision = _this2$state.revision,\n              data = _this2$state.data,\n              xValue = _this2$state.xValue,\n              yValue = _this2$state.yValue; //Just uses the es6 destructuring.\n          // xValue = res.data.time\n          // yValue = res.data.values\n\n          var _data = [{\n            x: res.data.time,\n            y: res.data.values\n          }]; //console.log('x-axis time array: ' + data[0].x)\n          //console.log('y-axis data array: ' + data[0].y)\n          // this.increaseGraphic({ , time })\n\n          _this2.setState({\n            //This function will set the data in the state object, every time setState is called the graph renders.\n            revision: _this2.state.revision + 1,\n            data: _data,\n            xValue: res.data.time,\n            yValue: res.data.values\n          });\n\n          layout.datarevision = _this2.state.revision + 1;\n        }\n      }).then(function () {\n        socket.on('DataStream', function (data) {\n          //Data coming in from the socket being sent to increaseGraphic function\n          _this2.increaseGraphic(data);\n        }); //End of Socket subscription.\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: this.state.data,\n          layout: this.state.layout,\n          revision: this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return LightOut;\n}(React.Component);\n\nexport { LightOut as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/LightOut.js"],"names":["React","Plot","io","moment","axios","socket","transports","LightOut","state","xValue","yValue","data","x","y","name","type","mode","marker","color","layout","datarevision","revision","time","increaseGraphic","push","console","log","_data","Object","values","setState","get","format","then","res","status","on","width","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\nimport io from 'socket.io-client'\nimport moment from 'moment'\nimport axios from 'axios'\n\nconst socket = io('http://localhost:9000', {\n    transports: ['websocket', 'polling'],\n})\n\nexport default class LightOut extends React.Component {\n    state = {\n        //Initial State of data\n        xValue: [],\n        yValue: [],\n        data: [\n            {\n                x: [],\n                y: [],\n                name: 'Line 1',\n                type: 'scatter',\n                mode: 'lines',\n                marker: { color: 'blue' },\n            },\n        ],\n        layout: {\n            datarevision: 0,\n        },\n        revision: 0,\n        time: '',\n    }\n\n    componentDidMount() {\n        axios\n            .get(`http://127.0.0.1:9000/data?node=2&date=${moment().format('L')}&data=LightOut`)\n            .then((res) => {\n                if (res.status === 200) {\n                    //Need to figure out how to take this data and plot it on the graph.\n                    console.log('y-axis' + res.data.values)\n                    console.log('x-axis' + res.data.time)\n\n                    const { layout, revision, data, xValue, yValue } = this.state //Just uses the es6 destructuring.\n\n                    // xValue = res.data.time\n                    // yValue = res.data.values\n\n                    let _data = [\n                        {\n                            x: res.data.time,\n                            y: res.data.values,\n                        },\n                    ]\n\n                    //console.log('x-axis time array: ' + data[0].x)\n                    //console.log('y-axis data array: ' + data[0].y)\n\n                    // this.increaseGraphic({ , time })\n                    this.setState({\n                        //This function will set the data in the state object, every time setState is called the graph renders.\n                        revision: this.state.revision + 1,\n                        data: _data,\n                        xValue: res.data.time,\n                        yValue: res.data.values,\n                    })\n                    layout.datarevision = this.state.revision + 1\n                }\n            })\n            .then(() => {\n                socket.on('DataStream', (data) => {\n                    //Data coming in from the socket being sent to increaseGraphic function\n                    this.increaseGraphic(data)\n                }) //End of Socket subscription.\n            })\n    }\n\n    increaseGraphic = ({ LightOut, time }) => {\n        //Incoming data is passed as an object.\n        const { layout, revision, data, xValue, yValue } = this.state\n\n        xValue.push(time)\n        yValue.push(LightOut)\n\n        console.log('datat', data[0].x)\n\n        let _data = Object.values(data)\n        _data[0].x = xValue\n        _data[0].y = yValue\n\n        console.log('DATA=>', _data)\n\n        // line1.x.push(time);\n        // line1.y.push(value);\n        // line1.dummy.push(revision);\n        // if (line1.x.length >= 10) {\n        //   line1.x.shift()\n        //   line1.y.shift()\n        // }\n        // let _revision = revision++;\n\n        // line2.x.push(this.rand())\n        // line2.y.push(this.rand())\n        // if (line2.x.length >= 10) {\n        //   line2.x.shift()\n        //   line2.y.shift()\n        // }\n\n        this.setState({ revision: this.state.revision + 1, data: _data })\n        layout.datarevision = this.state.revision + 1\n    }\n\n    render() {\n        return (\n            <div>\n                <Plot\n                    data={this.state.data}\n                    layout={this.state.layout}\n                    revision={this.state.revision}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    graphDiv=\"graph\"\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}