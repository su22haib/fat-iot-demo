{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/TemperatureOut.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io('http://localhost:9000', {\n  transports: ['websocket', 'polling']\n});\n\nvar TemperatureOut = /*#__PURE__*/function (_React$Component) {\n  _inherits(TemperatureOut, _React$Component);\n\n  var _super = _createSuper(TemperatureOut);\n\n  function TemperatureOut() {\n    var _this;\n\n    _classCallCheck(this, TemperatureOut);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //Initial State of data\n      xValue: [],\n      yValue: [],\n      data: [{\n        x: [],\n        y: [],\n        name: 'Line 1',\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }],\n      layout: {\n        datarevision: 0\n      },\n      revision: 0,\n      time: ''\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var TempOut = _ref.TempOut,\n          time = _ref.time;\n      //Incoming data is passed as an object.\n      var _this$state = _this.state,\n          layout = _this$state.layout,\n          revision = _this$state.revision,\n          data = _this$state.data,\n          xValue = _this$state.xValue,\n          yValue = _this$state.yValue;\n      xValue.push(time);\n      yValue.push(TempOut);\n      console.log('datat', data[0].x);\n\n      var _data = Object.values(data);\n\n      _data[0].x = xValue;\n      _data[0].y = yValue;\n      console.log('DATA=>', _data); // line1.x.push(time);\n      // line1.y.push(value);\n      // line1.dummy.push(revision);\n      // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // let _revision = revision++;\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1,\n        data: _data\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(TemperatureOut, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // setInterval(this.increaseGraphic, 1000)\n      socket.on('DataStream', function (data) {\n        //Data coming in from the socket being sent to increaseGraphic function\n        _this2.increaseGraphic(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: this.state.data,\n          layout: this.state.layout,\n          revision: this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return TemperatureOut;\n}(React.Component);\n\nexport { TemperatureOut as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/CustomCharts/TemperatureOut.js"],"names":["React","Plot","io","socket","transports","TemperatureOut","state","xValue","yValue","data","x","y","name","type","mode","marker","color","layout","datarevision","revision","time","increaseGraphic","TempOut","push","console","log","_data","Object","values","setState","on","width","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:9000', {\n    transports: ['websocket', 'polling'],\n})\n\nexport default class TemperatureOut extends React.Component {\n    state = {\n        //Initial State of data\n        xValue: [],\n        yValue: [],\n        data: [\n            {\n                x: [],\n                y: [],\n                name: 'Line 1',\n                type: 'scatter',\n                mode: 'lines+markers',\n                marker: { color: 'red' },\n            },\n        ],\n        layout: {\n            datarevision: 0,\n        },\n        revision: 0,\n        time: '',\n    }\n\n    componentDidMount() {\n        // setInterval(this.increaseGraphic, 1000)\n        socket.on('DataStream', (data) => {\n            //Data coming in from the socket being sent to increaseGraphic function\n            this.increaseGraphic(data)\n        })\n    }\n\n    increaseGraphic = ({ TempOut, time }) => {\n        //Incoming data is passed as an object.\n        const { layout, revision, data, xValue, yValue } = this.state\n\n        xValue.push(time)\n        yValue.push(TempOut)\n\n        console.log('datat', data[0].x)\n\n        let _data = Object.values(data)\n        _data[0].x = xValue\n        _data[0].y = yValue\n\n        console.log('DATA=>', _data)\n\n        // line1.x.push(time);\n        // line1.y.push(value);\n        // line1.dummy.push(revision);\n        // if (line1.x.length >= 10) {\n        //   line1.x.shift()\n        //   line1.y.shift()\n        // }\n        // let _revision = revision++;\n\n        // line2.x.push(this.rand())\n        // line2.y.push(this.rand())\n        // if (line2.x.length >= 10) {\n        //   line2.x.shift()\n        //   line2.y.shift()\n        // }\n\n        this.setState({ revision: this.state.revision + 1, data: _data })\n        layout.datarevision = this.state.revision + 1\n    }\n\n    render() {\n        return (\n            <div>\n                <Plot\n                    data={this.state.data}\n                    layout={this.state.layout}\n                    revision={this.state.revision}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    graphDiv=\"graph\"\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}