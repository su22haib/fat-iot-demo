{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/theme/colors/Colors.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DbForm1() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1];\n\n  var onSubmit = function onSubmit(data, startDate) {\n    console.log(data);\n    console.log(startDate);\n    console.log('The Submit button was clicked'); // axios.get(`localhost:9000/data?node=${}&date=${}`)\n    // .then((response)=>{\n    //   //Data coming in from API, should be sent to create the chart.\n    // })\n    // .catch((error)=>{\n    //   \n    // })\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Node: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register(\"Node\")), {}, {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"6\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select the Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: startDate,\n          onChange: function onChange(date) {\n            return setStartDate(date);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DbForm1, \"cUikWngnj4pw4hQYQxDxQkIp6+o=\", false, function () {\n  return [useForm];\n});\n\n_c = DbForm1;\n\nvar DataReviewChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataReviewChart, _React$Component);\n\n  var _super = _createSuper(DataReviewChart);\n\n  function DataReviewChart() {\n    var _this;\n\n    _classCallCheck(this, DataReviewChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      line1: {\n        x: [0],\n        y: [0],\n        name: \"Line 1\"\n      },\n      // line2: {\n      //   x: [1, 2, 3],\n      //   y: [-3, -2, -1],\n      //   name: 'Line 2',\n      // },\n      layout: {\n        datarevision: 0\n      },\n      revision: 0\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var value = _ref.value,\n          analogTwo = _ref.analogTwo,\n          timeStamp = _ref.timeStamp;\n      var _this$state = _this.state,\n          line1 = _this$state.line1,\n          line2 = _this$state.line2,\n          layout = _this$state.layout,\n          revision = _this$state.revision;\n      line1.x.push(revision);\n      line1.y.push(value); // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(DataReviewChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// setInterval(this.increaseGraphic, 1000)\n      // socket.on(\"ana\", (data) => {\n      //   this.increaseGraphic(data);\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CCard, {\n          children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n            children: \"Review Past Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n            children: /*#__PURE__*/_jsxDEV(DbForm1, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CCardHeader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n            children: /*#__PURE__*/_jsxDEV(Plot, {\n              data: [this.state.line1],\n              layout: this.state.layout,\n              revision: this.state.revision,\n              useResizeHandler: true,\n              style: {\n                width: \"100%\",\n                height: \"100%\"\n              },\n              graphDiv: \"graph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return DataReviewChart;\n}(React.Component);\n\nexport { DataReviewChart as default };\n\nvar _c;\n\n$RefreshReg$(_c, \"DbForm1\");","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/theme/colors/Colors.js"],"names":["React","useEffect","useState","createRef","classNames","useForm","DatePicker","CRow","CCol","CCard","CCardHeader","CCardBody","rgbToHex","DocsLink","axios","Plot","DbForm1","register","handleSubmit","errors","formState","Date","startDate","setStartDate","onSubmit","data","console","log","date","DataReviewChart","state","line1","x","y","name","layout","datarevision","revision","increaseGraphic","value","analogTwo","timeStamp","line2","push","setState","width","height","Component"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction DbForm1() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  \n  const [startDate, setStartDate] = useState(new Date());\n  const onSubmit = (data, startDate) => {\n    console.log(data);\n    console.log(startDate);\n    console.log('The Submit button was clicked');\n    // axios.get(`localhost:9000/data?node=${}&date=${}`)\n    // .then((response)=>{\n    //   //Data coming in from API, should be sent to create the chart.\n    // })\n    // .catch((error)=>{\n    //   \n    // })\n  };\n\n\n\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <CRow>\n        <CCol>\n          <label>Node: </label>\n          <select {...register(\"Node\")}>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n          </select>\n        </CCol>\n        <CCol>\n          <label>Select the Date</label>\n          <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n        </CCol>\n        <CCol>\n          <input type=\"submit\" />\n        </CCol>          \n      </CRow>\n    </form>\n  );\n}\n\nexport default class DataReviewChart extends React.Component {\n  state = {\n    line1: {\n      x: [0],\n      y: [0],\n      name: \"Line 1\",\n    },\n    // line2: {\n    //   x: [1, 2, 3],\n    //   y: [-3, -2, -1],\n    //   name: 'Line 2',\n    // },\n\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n  };\n\n  componentDidMount() {\n    // setInterval(this.increaseGraphic, 1000)\n    // socket.on(\"ana\", (data) => {\n    //   this.increaseGraphic(data);\n    // });\n  }\n\n  increaseGraphic = ({ value, analogTwo, timeStamp }) => {\n    const { line1, line2, layout, revision } = this.state;\n    line1.x.push(revision);\n    line1.y.push(value);\n\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1 });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <CCard>\n          <CCardHeader>Review Past Data</CCardHeader>\n          <CCardBody>\n            <DbForm1 />\n          </CCardBody>\n \n          <CCardHeader></CCardHeader>\n          <CCardBody>\n            <Plot\n              data={[this.state.line1]}\n              layout={this.state.layout}\n              revision={this.state.revision}\n              useResizeHandler={true}\n              style={{ width: \"100%\", height: \"100%\" }}\n              graphDiv=\"graph\"\n            />\n          </CCardBody>\n        </CCard>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}