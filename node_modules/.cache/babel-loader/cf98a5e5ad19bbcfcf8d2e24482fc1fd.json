{"ast":null,"code":"import _toConsumableArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors ori.js\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DbForm1() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1]; //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n\n\n  var convertDate = function convertDate() {\n    var str = startDate.toString();\n    var parts = str.split(\" \");\n    var months = {\n      Jan: \"01\",\n      Feb: \"02\",\n      Mar: \"03\",\n      Apr: \"04\",\n      May: \"05\",\n      Jun: \"06\",\n      Jul: \"07\",\n      Aug: \"08\",\n      Sep: \"09\",\n      Oct: \"10\",\n      Nov: \"11\",\n      Dec: \"12\"\n    };\n    return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n  };\n\n  var onSubmit = function onSubmit(data) {\n    console.log(data.Node);\n    console.log(convertDate(startDate));\n    console.log(\"The Submit button was clicked\");\n    axios.get(\"http://127.0.0.1:9000/dbtest\") //data?node=${toString(data.Node)}&date=${convertDate(startDate)}\n    .then(function (response) {\n      console.log(response); //Data coming in from API, should be sent to create the chart.\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(CRow, {\n      children: [/*#__PURE__*/_jsxDEV(CCol, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Node: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register(\"Node\")), {}, {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"6\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select the Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: startDate,\n          onChange: function onChange(date) {\n            return setStartDate(date);\n          },\n          dateFormat: \"MM/dd/yyyy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CCol, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DbForm1, \"cUikWngnj4pw4hQYQxDxQkIp6+o=\", false, function () {\n  return [useForm];\n});\n\n_c = DbForm1;\n\nvar SampleChart = function SampleChart() {\n  _s2();\n\n  //This is where I collect data over socket and put in an array.\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeStamp = _useState4[0],\n      setTimeStamp = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1]; // 1. listen for a Analog event and update the state.\n\n\n  useEffect(function () {\n    socket.on(\"ana\", function (Data) {\n      console.log(data);\n      console.log(Data);\n      setTimeStamp(function (currentData) {\n        return [].concat(_toConsumableArray(currentData), [Data.time]);\n      });\n      setData(function (currentData) {\n        return [].concat(_toConsumableArray(currentData), [Data.value]);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CCard, {\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: \"Review Past Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(DbForm1, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: [],\n            y: [],\n            type: \"scatter\",\n            marker: {\n              color: \"red\"\n            }\n          }],\n          layout: _this.state.layout,\n          revision: _this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }, _this);\n};\n\n_s2(SampleChart, \"fw2LtKobB60RqJZcycBGfFAcmOw=\");\n\n_c2 = SampleChart;\nexport default SampleChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DbForm1\");\n$RefreshReg$(_c2, \"SampleChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors ori.js"],"names":["React","useEffect","useState","createRef","classNames","useForm","DatePicker","CRow","CCol","CCard","CCardHeader","CCardBody","rgbToHex","DocsLink","axios","Plot","DbForm1","register","handleSubmit","errors","formState","Date","startDate","setStartDate","convertDate","str","toString","parts","split","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","onSubmit","data","console","log","Node","get","then","response","catch","error","date","SampleChart","timeStamp","setTimeStamp","setData","socket","on","Data","currentData","time","value","x","y","type","marker","color","state","layout","revision","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\nimport classNames from \"classnames\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport { rgbToHex } from \"@coreui/utils\";\nimport { DocsLink } from \"src/reusable\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction DbForm1() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const [startDate, setStartDate] = useState(new Date());\n\n  //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n  const convertDate = () => {\n    let str = startDate.toString();\n    let parts = str.split(\" \");\n    let months = {\n      Jan: \"01\",\n      Feb: \"02\",\n      Mar: \"03\",\n      Apr: \"04\",\n      May: \"05\",\n      Jun: \"06\",\n      Jul: \"07\",\n      Aug: \"08\",\n      Sep: \"09\",\n      Oct: \"10\",\n      Nov: \"11\",\n      Dec: \"12\",\n    };\n    return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n  };\n\n  const onSubmit = (data) => {\n    console.log(data.Node);\n    console.log(convertDate(startDate));\n\n    console.log(\"The Submit button was clicked\");\n    axios\n      .get(`http://127.0.0.1:9000/dbtest`) //data?node=${toString(data.Node)}&date=${convertDate(startDate)}\n      .then((response) => {\n        console.log(response);\n        //Data coming in from API, should be sent to create the chart.\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <CRow>\n        <CCol>\n          <label>Node: </label>\n          <select {...register(\"Node\")}>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n          </select>\n        </CCol>\n        <CCol>\n          <label>Select the Date</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            dateFormat=\"MM/dd/yyyy\"\n          />\n        </CCol>\n        <CCol>\n          <input type=\"submit\" />\n        </CCol>\n      </CRow>\n    </form>\n  );\n}\n\nconst SampleChart = () => {\n  //This is where I collect data over socket and put in an array.\n  const [timeStamp, setTimeStamp] = useState([]);\n  const [data, setData] = useState([]);\n\n  // 1. listen for a Analog event and update the state.\n  useEffect(() => {\n    socket.on(\"ana\", (Data) => {\n      console.log(data);\n\n      console.log(Data);\n\n      setTimeStamp((currentData) => [...currentData, Data.time]);\n      setData((currentData) => [...currentData, Data.value]);\n    });\n  }, []);\n\n  return (\n  <div>\n    <CCard>\n      <CCardHeader>Review Past Data</CCardHeader>\n      <CCardBody>\n        <DbForm1 />\n      </CCardBody>\n      <CCardHeader></CCardHeader>\n      <CCardBody>\n      <Plot\n          data={[\n            {\n              x: [],\n              y: [],\n              type: \"scatter\",\n              marker: { color: \"red\" },\n            },\n          ]}\n          layout={this.state.layout}\n          revision={this.state.revision}\n          useResizeHandler={true}\n          style={{ width: \"100%\", height: \"100%\" }}\n          graphDiv=\"graph\"\n        />\n      </CCardBody>\n    </CCard>\n  </div>\n  );\n};\n\nexport default SampleChart;"]},"metadata":{},"sourceType":"module"}