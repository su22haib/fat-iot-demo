{"ast":null,"code":"import _toConsumableArray from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/suhaib/Desktop/frontend/remote-monitoring-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring-master/src/views/charts/MainChartExample.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\"; //import Firebase from \"src/firebase\";\n\nimport moment from \"moment\";\nimport io from 'socket.io-client'; //======================Socket Setup=================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n}); //=====================Section End===================\n// // const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// // const brandInfo = getStyle(\"info\") || \"#20a8d8\";\n// const brandDanger = getStyle(\"danger\") || \"#f86c6b\";\n// const brandWarning = getStyle('warning') || '#f9b115'\n// const MainChartExample = (attributes) => {\n//   const random = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n//   };\n//   // const [temperatureArr, setTemperatureArr] = useState([]);\n//   // const [humidityArr, setHumidityArr] = useState([]);\n//   const [labels, setLabels] = useState([]);\n//   const [data, setData] = useState([]);\n//     // const unsubscribe = Firebase.firestore()\n//     //   .collection(\"SensorReadings\")\n//     //   .orderBy(\"timeStamp\")\n//     //   .onSnapshot((snapshot) => {\n//     //     let dumTemp = [];\n//     //     let dumHum = [];\n//     //     let dumLabel = [];\n//     //     if (snapshot.size) {\n//     //       snapshot.forEach((doc) => {\n//     //         dumTemp.push(doc.data().temperature);\n//     //         dumHum.push(doc.data().humidity);\n//     //         dumLabel.push(\n//     //           moment(doc.data().timeStamp.toDate()).format(\n//     //             \"DD/MM/YYYY HH:MM:SS\"\n//     //           )\n//     //         );\n//     //       });\n//     //       setHumidityArr(dumHum);\n//     //       setTemperatureArr(dumTemp);\n//     //       setLabels(dumLabel);\n//     useEffect(()=>{\n//       socket.on('temp', temperature =>{\n//         setData(currentData =>[...currentData, temperature]);\n//       });\n//     }, []);\n//   const defaultDatasets = (() => {\n//     let elements = 27;\n//     const data1 = [];\n//     const data2 = [];\n//     const data3 = [];\n//     for (let i = 0; i <= elements; i++) {\n//       data1.push(random(50, 200));\n//       data2.push(random(80, 100));\n//       data3.push(65);\n//     }\n//     return [\n//       // {\n//       //   label: 'My First dataset',\n//       //   backgroundColor: hexToRgba(brandInfo, 10),\n//       //   borderColor: brandInfo,\n//       //   pointHoverBackgroundColor: brandInfo,\n//       //   borderWidth: 2,\n//       //   data: data1\n//       // },\n//       {\n//         label: \"Temperature Degree Celsius\",\n//         backgroundColor: \"transparent\",\n//         borderColor: brandDanger,\n//         pointHoverBackgroundColor: brandDanger,\n//         borderWidth: 2,\n//         data: data,\n//       },\n//       // {\n//       //   label: \"Humidity\",\n//       //   backgroundColor: \"transparent\",\n//       //   borderColor: brandWarning,\n//       //   pointHoverBackgroundColor: brandWarning,\n//       //   borderWidth: 1,\n//       //   borderDash: [8, 5],\n//       //   data: humidityArr,\n//       // },\n//     ];\n//   })();\n//   const defaultOptions = (() => {\n//     return {\n//       maintainAspectRatio: false,\n//       legend: {\n//         display: false,\n//       },\n//       scales: {\n//         xAxes: [\n//           {\n//             gridLines: {\n//               drawOnChartArea: false,\n//             },\n//           },\n//         ],\n//         yAxes: [\n//           {\n//             ticks: {\n//               beginAtZero: true,\n//               stepSize: 5,\n//               max: 110,\n//             },\n//             gridLines: {\n//               display: true,\n//             },\n//           },\n//         ],\n//       },\n//       elements: {\n//         point: {\n//           radius: 0,\n//           hitRadius: 10,\n//           hoverRadius: 4,\n//           hoverBorderWidth: 3,\n//         },\n//       },\n//     };\n//   })();\n//   // render\n//   return (\n//     <CChartLine\n//       {...attributes}\n//       datasets={defaultDatasets}\n//       options={defaultOptions}\n//       labels={labels}\n//     />\n//   );\n// };\n\nvar MainChartExample = function MainChartExample(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1]; // 1. listen for a cpu event and update the state\n\n\n  useEffect(function () {\n    socket.on('temp', function (temperature) {\n      setData(function (currentData) {\n        return [].concat(_toConsumableArray(currentData), [temperature]);\n      });\n    });\n  }, []); // 2. render the line chart using the state\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real Time Temperature Over MQTT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Line, {\n        dataKey: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MainChartExample, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = MainChartExample;\nexport default MainChartExample;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainChartExample\");","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring-master/src/views/charts/MainChartExample.js"],"names":["React","useEffect","useState","CChartLine","getStyle","hexToRgba","moment","io","socket","transports","MainChartExample","data","setData","on","temperature","currentData"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,eAApC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAGA;;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACzCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjgBAAgB,GAAG,SAAnBA,gBAAmB,OAAQ;AAAA;;AAAA;;AAAA,kBACPR,QAAQ,CAAC,EAAD,CADD;AAAA;AAAA,MACxBS,IADwB;AAAA,MAClBC,OADkB,kBAG/B;;;AACAX,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkB,UAAAC,WAAW,EAAI;AAC/BF,MAAAA,OAAO,CAAC,UAAAG,WAAW;AAAA,4CAAQA,WAAR,IAAqBD,WAArB;AAAA,OAAZ,CAAP;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT,CAJ+B,CAU/B;;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE,GAAlB;AAAuB,MAAA,MAAM,EAAE,GAA/B;AAAoC,MAAA,IAAI,EAAEH,IAA1C;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CArBD;;GAAMD,gB;;KAAAA,gB;AAuBN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\n//import Firebase from \"src/firebase\";\nimport moment from \"moment\";\nimport io from 'socket.io-client';\n\n\n//======================Socket Setup=================\n\nconst socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n});\n\n\n//=====================Section End===================\n\n\n// // const brandSuccess = getStyle(\"success\") || \"#4dbd74\";\n// // const brandInfo = getStyle(\"info\") || \"#20a8d8\";\n// const brandDanger = getStyle(\"danger\") || \"#f86c6b\";\n// const brandWarning = getStyle('warning') || '#f9b115'\n\n// const MainChartExample = (attributes) => {\n//   const random = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n//   };\n\n//   // const [temperatureArr, setTemperatureArr] = useState([]);\n//   // const [humidityArr, setHumidityArr] = useState([]);\n//   const [labels, setLabels] = useState([]);\n\n//   const [data, setData] = useState([]);\n\n  \n//     // const unsubscribe = Firebase.firestore()\n//     //   .collection(\"SensorReadings\")\n//     //   .orderBy(\"timeStamp\")\n//     //   .onSnapshot((snapshot) => {\n//     //     let dumTemp = [];\n//     //     let dumHum = [];\n//     //     let dumLabel = [];\n//     //     if (snapshot.size) {\n//     //       snapshot.forEach((doc) => {\n//     //         dumTemp.push(doc.data().temperature);\n//     //         dumHum.push(doc.data().humidity);\n//     //         dumLabel.push(\n//     //           moment(doc.data().timeStamp.toDate()).format(\n//     //             \"DD/MM/YYYY HH:MM:SS\"\n//     //           )\n//     //         );\n//     //       });\n//     //       setHumidityArr(dumHum);\n//     //       setTemperatureArr(dumTemp);\n//     //       setLabels(dumLabel);\n\n    \n    \n//     useEffect(()=>{\n//       socket.on('temp', temperature =>{\n//         setData(currentData =>[...currentData, temperature]);\n//       });\n//     }, []);\n    \n      \n  \n\n//   const defaultDatasets = (() => {\n//     let elements = 27;\n//     const data1 = [];\n//     const data2 = [];\n//     const data3 = [];\n//     for (let i = 0; i <= elements; i++) {\n//       data1.push(random(50, 200));\n//       data2.push(random(80, 100));\n//       data3.push(65);\n//     }\n//     return [\n//       // {\n//       //   label: 'My First dataset',\n//       //   backgroundColor: hexToRgba(brandInfo, 10),\n//       //   borderColor: brandInfo,\n//       //   pointHoverBackgroundColor: brandInfo,\n//       //   borderWidth: 2,\n//       //   data: data1\n//       // },\n//       {\n//         label: \"Temperature Degree Celsius\",\n//         backgroundColor: \"transparent\",\n//         borderColor: brandDanger,\n//         pointHoverBackgroundColor: brandDanger,\n//         borderWidth: 2,\n//         data: data,\n//       },\n//       // {\n//       //   label: \"Humidity\",\n//       //   backgroundColor: \"transparent\",\n//       //   borderColor: brandWarning,\n//       //   pointHoverBackgroundColor: brandWarning,\n//       //   borderWidth: 1,\n//       //   borderDash: [8, 5],\n//       //   data: humidityArr,\n//       // },\n//     ];\n//   })();\n\n//   const defaultOptions = (() => {\n//     return {\n//       maintainAspectRatio: false,\n//       legend: {\n//         display: false,\n//       },\n//       scales: {\n//         xAxes: [\n//           {\n//             gridLines: {\n//               drawOnChartArea: false,\n//             },\n//           },\n//         ],\n//         yAxes: [\n//           {\n//             ticks: {\n//               beginAtZero: true,\n//               stepSize: 5,\n//               max: 110,\n//             },\n//             gridLines: {\n//               display: true,\n//             },\n//           },\n//         ],\n//       },\n//       elements: {\n//         point: {\n//           radius: 0,\n//           hitRadius: 10,\n//           hoverRadius: 4,\n//           hoverBorderWidth: 3,\n//         },\n//       },\n//     };\n//   })();\n\n//   // render\n//   return (\n//     <CChartLine\n//       {...attributes}\n//       datasets={defaultDatasets}\n//       options={defaultOptions}\n//       labels={labels}\n//     />\n//   );\n// };\n\nconst MainChartExample = ({}) => {\n  const [data, setData] = useState([]);\n\n  // 1. listen for a cpu event and update the state\n  useEffect(() => {\n    socket.on('temp', temperature => {\n      setData(currentData => [...currentData, temperature]);\n    });\n  }, []);\n\n  // 2. render the line chart using the state\n  return (\n    <div>\n      <h1>Real Time Temperature Over MQTT</h1>\n      <LineChart width={500} height={300} data={data}>\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Line dataKey=\"value\" />\n      </LineChart>\n    </div>\n  );\n};\n\nexport default MainChartExample;\n"]},"metadata":{},"sourceType":"module"}