{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:9000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nvar TemperatureChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(TemperatureChart, _React$Component);\n\n  var _super = _createSuper(TemperatureChart);\n\n  function TemperatureChart() {\n    var _this;\n\n    _classCallCheck(this, TemperatureChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //Initial State of data\n      data: [{\n        x: [0],\n        y: [0],\n        dummy: [0],\n        name: \"Line 1\",\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        }\n      }],\n      layout: {\n        datarevision: 0\n      },\n      revision: 0,\n      time: \"\"\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var value = _ref.value,\n          time = _ref.time;\n      //Incoming data is passed as an object.\n      var _this$state = _this.state,\n          line1 = _this$state.line1,\n          line2 = _this$state.line2,\n          layout = _this$state.layout,\n          revision = _this$state.revision,\n          data = _this$state.data;\n      console.log('data', data); // line1.x.push(time);\n      // line1.y.push(value);\n      // line1.dummy.push(revision);\n      // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // let _revision = revision++;\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(TemperatureChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // setInterval(this.increaseGraphic, 1000)\n      socket.on(\"temp\", function (data) {\n        //Data coming in from the socket being sent to increaseGraphic function\n        _this2.increaseGraphic(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: this.state.data,\n          layout: this.state.layout,\n          revision: this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return TemperatureChart;\n}(React.Component);\n\nexport { TemperatureChart as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js"],"names":["React","Plot","io","socket","transports","TemperatureChart","state","data","x","y","dummy","name","type","mode","marker","color","layout","datarevision","revision","time","increaseGraphic","value","line1","line2","console","log","setState","on","width","height","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACzCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjB;;IAIqBC,gB;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACN;AACAC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,CAAC,EAAE,CAAC,CAAD,CADL;AAEEC,QAAAA,CAAC,EAAE,CAAC,CAAD,CAFL;AAGEC,QAAAA,KAAK,EAAE,CAAC,CAAD,CAHT;AAIEC,QAAAA,IAAI,EAAE,QAJR;AAKEC,QAAAA,IAAI,EAAE,SALR;AAMEC,QAAAA,IAAI,EAAE,eANR;AAOEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAPV,OADI,CAFA;AAaNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR,OAbF;AAgBNC,MAAAA,QAAQ,EAAE,CAhBJ;AAiBNC,MAAAA,IAAI,EAAE;AAjBA,K;;UA4BRC,e,GAAkB,gBAAqB;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXF,IAAW,QAAXA,IAAW;AACrC;AADqC,wBAEY,MAAKb,KAFjB;AAAA,UAE7BgB,KAF6B,eAE7BA,KAF6B;AAAA,UAEtBC,KAFsB,eAEtBA,KAFsB;AAAA,UAEfP,MAFe,eAEfA,MAFe;AAAA,UAEPE,QAFO,eAEPA,QAFO;AAAA,UAEIX,IAFJ,eAEIA,IAFJ;AAIrCiB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBlB,IAApB,EAJqC,CAMrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAKmB,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,MAAKZ,KAAL,CAAWY,QAAX,GAAsB;AAAlC,OAAd;;AACAF,MAAAA,MAAM,CAACC,YAAP,GAAsB,MAAKX,KAAL,CAAWY,QAAX,GAAsB,CAA5C;AACD,K;;;;;;;WAhCD,6BAAoB;AAAA;;AAClB;AACAf,MAAAA,MAAM,CAACwB,EAAP,CAAU,MAAV,EAAkB,UAACpB,IAAD,EAAU;AAC1B;AACA,QAAA,MAAI,CAACa,eAAL,CAAqBb,IAArB;AACD,OAHD;AAID;;;WA4BD,kBAAS;AACP,0BACE;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IADnB;AAEE,UAAA,MAAM,EAAE,KAAKD,KAAL,CAAWU,MAFrB;AAGE,UAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWY,QAHvB;AAIE,UAAA,gBAAgB,EAAE,IAJpB;AAKE,UAAA,KAAK,EAAE;AAAEU,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,MAAM,EAAE;AAAzB,WALT;AAME,UAAA,QAAQ,EAAC;AANX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAYD;;;;EApE2C7B,KAAK,CAAC8B,S;;SAA/BzB,gB","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:9000\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nexport default class TemperatureChart extends React.Component {\n  state = {\n    //Initial State of data\n    data: [\n      {\n        x: [0],\n        y: [0],\n        dummy: [0],\n        name: \"Line 1\",\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: { color: \"red\" },\n      },\n    ],\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n    time: \"\",\n  };\n\n  componentDidMount() {\n    // setInterval(this.increaseGraphic, 1000)\n    socket.on(\"temp\", (data) => {\n      //Data coming in from the socket being sent to increaseGraphic function\n      this.increaseGraphic(data);\n    });\n  }\n\n  increaseGraphic = ({ value, time }) => {\n    //Incoming data is passed as an object.\n    const { line1, line2, layout, revision , data} = this.state;\n\n    console.log('data', data)\n\n    // line1.x.push(time);\n    // line1.y.push(value);\n    // line1.dummy.push(revision);\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n    // let _revision = revision++;\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1 });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={this.state.data}\n          layout={this.state.layout}\n          revision={this.state.revision}\n          useResizeHandler={true}\n          style={{ width: \"100%\", height: \"100%\" }}\n          graphDiv=\"graph\"\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}