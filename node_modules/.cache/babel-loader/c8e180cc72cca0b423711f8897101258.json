{"ast":null,"code":"import _toConsumableArray from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/charts/plotlyAnalog.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client'; //======================Socket Setup==========================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:3001\", {\n  transports: ['websocket', 'polling']\n}); //=====================Section End============================\n\nvar SampleChart = function SampleChart() {\n  _s();\n\n  //This is where I collect data over socket and put in an array.\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      timeStamp = _useState2[0],\n      setTimeStamp = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1]; // 1. listen for a Analog event and update the state.\n\n\n  useEffect(function () {\n    socket.on('temp', function (Analog) {\n      setData(function (currentData) {\n        return [].concat(_toConsumableArray(currentData), [Analog]);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: [{\n      data: data,\n      type: 'scatter',\n      marker: {\n        color: 'red'\n      }\n    }],\n    layout: {\n      width: 800,\n      height: 400,\n      title: 'Sample Chart'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(SampleChart, \"fw2LtKobB60RqJZcycBGfFAcmOw=\");\n\n_c = SampleChart;\nexport default SampleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SampleChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/charts/plotlyAnalog.js"],"names":["React","useEffect","useState","Plot","io","socket","transports","SampleChart","timeStamp","setTimeStamp","data","setData","on","Analog","currentData","type","marker","color","width","height","title"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAGA;;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACvCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD2B,CAA1B,CAAjB,C,CAIA;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAK;AAAA;;AAErB;AAFqB,kBAGaL,QAAQ,CAAC,EAAD,CAHrB;AAAA;AAAA,MAGdM,SAHc;AAAA,MAGHC,YAHG;;AAAA,mBAIGP,QAAQ,CAAC,EAAD,CAJX;AAAA;AAAA,MAIdQ,IAJc;AAAA,MAIRC,OAJQ,kBAMrB;;;AACAV,EAAAA,SAAS,CAAC,YAAM;AAEZI,IAAAA,MAAM,CAACO,EAAP,CAAU,MAAV,EAAkB,UAAAC,MAAM,EAAI;AAExBF,MAAAA,OAAO,CAAC,UAAAG,WAAW;AAAA,4CAAQA,WAAR,IAAqBD,MAArB;AAAA,OAAZ,CAAP;AAEH,KAJD;AAKH,GAPQ,EAON,EAPM,CAAT;AASA,sBACI,QAAC,IAAD;AACI,IAAA,IAAI,EAAI,CACJ;AACIH,MAAAA,IAAI,EAAJA,IADJ;AAEIK,MAAAA,IAAI,EAAE,SAFV;AAGIC,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AAHZ,KADI,CADZ;AAQA,IAAA,MAAM,EAAI;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE,GAArB;AAA0BC,MAAAA,KAAK,EAAC;AAAhC;AARV;AAAA;AAAA;AAAA;AAAA,WADJ;AAYH,CA5BD;;GAAMb,W;;KAAAA,W;AA8BN,eAAeA,WAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Plot from 'react-plotly.js';\nimport io from 'socket.io-client';\n\n\n//======================Socket Setup==========================\n\nconst socket = io(\"http://localhost:3001\", {\n    transports: ['websocket', 'polling']\n});\n    \n//=====================Section End============================\n\n\n\nconst SampleChart = ()=> {\n    \n    //This is where I collect data over socket and put in an array.\n    const [timeStamp, setTimeStamp] = useState([])\n    const [data, setData] = useState([]);\n\n    // 1. listen for a Analog event and update the state.\n    useEffect(() => {\n\n        socket.on('temp', Analog => {\n            \n            setData(currentData => [...currentData, Analog]);\n            \n        });\n    }, []);\n\n    return(\n        <Plot \n            data = {[\n                {\n                    data,\n                    type: 'scatter',\n                    marker: {color: 'red'},\n                },\n            ]}\n        layout = {{width: 800, height: 400, title:'Sample Chart'}}\n        />\n    );\n}\n\nexport default SampleChart;"]},"metadata":{},"sourceType":"module"}