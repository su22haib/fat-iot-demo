{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:3001\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nvar TemperatureChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(TemperatureChart, _React$Component);\n\n  var _super = _createSuper(TemperatureChart);\n\n  function TemperatureChart() {\n    var _this;\n\n    _classCallCheck(this, TemperatureChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      line1: {\n        x: [0],\n        y: [0],\n        name: \"Line 1\"\n      },\n      // line2: {\n      //   x: [1, 2, 3],\n      //   y: [-3, -2, -1],\n      //   name: 'Line 2',\n      // },\n      layout: {\n        datarevision: 0\n      },\n      revision: 0\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var value = _ref.value,\n          analogTwo = _ref.analogTwo,\n          timeStamp = _ref.timeStamp;\n      var _this$state = _this.state,\n          line1 = _this$state.line1,\n          line2 = _this$state.line2,\n          layout = _this$state.layout,\n          revision = _this$state.revision;\n      line1.x.push(revision);\n      line1.y.push(value); // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(TemperatureChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // setInterval(this.increaseGraphic, 1000)\n      socket.on(\"temp\", function (data) {\n        _this2.increaseGraphic(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: [this.state.line1],\n          layout: this.state.layout,\n          revision: this.state.revision,\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return TemperatureChart;\n}(React.Component);\n\nexport { TemperatureChart as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js"],"names":["React","Plot","io","socket","transports","TemperatureChart","state","line1","x","y","name","layout","datarevision","revision","increaseGraphic","value","analogTwo","timeStamp","line2","push","setState","on","data","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACzCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjB;;IAIqBC,gB;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,CAAC,EAAE,CAAC,CAAD,CADE;AAELC,QAAAA,CAAC,EAAE,CAAC,CAAD,CAFE;AAGLC,QAAAA,IAAI,EAAE;AAHD,OADD;AAMN;AACA;AACA;AACA;AACA;AAEAC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR,OAZF;AAeNC,MAAAA,QAAQ,EAAE;AAfJ,K;;UAyBRC,e,GAAkB,gBAAqC;AAAA,UAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,UAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,UAAhBC,SAAgB,QAAhBA,SAAgB;AAAA,wBACV,MAAKX,KADK;AAAA,UAC7CC,KAD6C,eAC7CA,KAD6C;AAAA,UACtCW,KADsC,eACtCA,KADsC;AAAA,UAC/BP,MAD+B,eAC/BA,MAD+B;AAAA,UACvBE,QADuB,eACvBA,QADuB;AAErDN,MAAAA,KAAK,CAACC,CAAN,CAAQW,IAAR,CAAaN,QAAb;AACAN,MAAAA,KAAK,CAACE,CAAN,CAAQU,IAAR,CAAaJ,KAAb,EAHqD,CAKrD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAKK,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAE,MAAKP,KAAL,CAAWO,QAAX,GAAsB;AAAlC,OAAd;;AACAF,MAAAA,MAAM,CAACC,YAAP,GAAsB,MAAKN,KAAL,CAAWO,QAAX,GAAsB,CAA5C;AACD,K;;;;;;;WA1BD,6BAAoB;AAAA;;AAClB;AACAV,MAAAA,MAAM,CAACkB,EAAP,CAAU,MAAV,EAAkB,UAACC,IAAD,EAAU;AAC1B,QAAA,MAAI,CAACR,eAAL,CAAqBQ,IAArB;AACD,OAFD;AAGD;;;WAuBD,kBAAS;AACP,0BACE;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CAAC,KAAKhB,KAAL,CAAWC,KAAZ,CADR;AAEE,UAAA,MAAM,EAAE,KAAKD,KAAL,CAAWK,MAFrB;AAGE,UAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWO,QAHvB;AAIE,UAAA,QAAQ,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;;;EA1D2Cb,KAAK,CAACuB,S;;SAA/BlB,gB","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:3001\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nexport default class TemperatureChart extends React.Component {\n  state = {\n    line1: {\n      x: [0],\n      y: [0],\n      name: \"Line 1\",\n    },\n    // line2: {\n    //   x: [1, 2, 3],\n    //   y: [-3, -2, -1],\n    //   name: 'Line 2',\n    // },\n\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n  };\n\n  componentDidMount() {\n    // setInterval(this.increaseGraphic, 1000)\n    socket.on(\"temp\", (data) => {\n      this.increaseGraphic(data);\n    });\n  }\n\n  increaseGraphic = ({ value, analogTwo, timeStamp }) => {\n    const { line1, line2, layout, revision } = this.state;\n    line1.x.push(revision);\n    line1.y.push(value);\n\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1 });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={[this.state.line1]}\n          layout={this.state.layout}\n          revision={this.state.revision}\n          graphDiv=\"graph\"\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}