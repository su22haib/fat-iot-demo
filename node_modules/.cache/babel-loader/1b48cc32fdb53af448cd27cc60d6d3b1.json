{"ast":null,"code":"import _classCallCheck from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/suhaib/Desktop/frontend/remote-monitoring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = io(\"http://localhost:9000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nvar TemperatureChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(TemperatureChart, _React$Component);\n\n  var _super = _createSuper(TemperatureChart);\n\n  function TemperatureChart() {\n    var _this;\n\n    _classCallCheck(this, TemperatureChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //Initial State of data\n      line1: {\n        x: [0],\n        y: [0],\n        dummy: [0],\n        name: \"Line 1\",\n        type: 'scatter'\n      },\n      // line2: {\n      //   x: [1, 2, 3],\n      //   y: [-3, -2, -1],\n      //   name: 'Line 2',\n      // },\n      layout: {\n        datarevision: 0\n      },\n      revision: 0,\n      time: ''\n    };\n\n    _this.increaseGraphic = function (_ref) {\n      var value = _ref.value,\n          time = _ref.time;\n      //Incoming data is passed as an object.\n      var _this$state = _this.state,\n          line1 = _this$state.line1,\n          line2 = _this$state.line2,\n          layout = _this$state.layout,\n          revision = _this$state.revision;\n      console.log('revision=>', time);\n      line1.x.push(time);\n      line1.y.push(value);\n      line1.dummy.push(revision); // if (line1.x.length >= 10) {\n      //   line1.x.shift()\n      //   line1.y.shift()\n      // }\n      // let _revision = revision++;\n      // line2.x.push(this.rand())\n      // line2.y.push(this.rand())\n      // if (line2.x.length >= 10) {\n      //   line2.x.shift()\n      //   line2.y.shift()\n      // }\n\n      _this.setState({\n        revision: _this.state.revision + 1\n      });\n\n      layout.datarevision = _this.state.revision + 1;\n    };\n\n    return _this;\n  }\n\n  _createClass(TemperatureChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // setInterval(this.increaseGraphic, 1000)\n      socket.on(\"temp\", function (data) {\n        //Data coming in from the socket being sent to increaseGraphic function\n        _this2.increaseGraphic(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: [this.state.line1],\n          layout: this.state.layout,\n          type: 'scatter',\n          revision: this.state.revision,\n          useResizeHandler: true,\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return TemperatureChart;\n}(React.Component);\n\nexport { TemperatureChart as default };","map":{"version":3,"sources":["/home/suhaib/Desktop/frontend/remote-monitoring/src/views/CustomCharts/TemperatureChart.js"],"names":["React","Plot","io","socket","transports","TemperatureChart","state","line1","x","y","dummy","name","type","layout","datarevision","revision","time","increaseGraphic","value","line2","console","log","push","setState","on","data","width","height","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACzCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD6B,CAA1B,CAAjB;;IAIqBC,gB;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;AAAsD;AAC5DC,MAAAA,KAAK,EAAE;AACLC,QAAAA,CAAC,EAAE,CAAC,CAAD,CADE;AAELC,QAAAA,CAAC,EAAE,CAAC,CAAD,CAFE;AAGLC,QAAAA,KAAK,EAAC,CAAC,CAAD,CAHD;AAILC,QAAAA,IAAI,EAAE,QAJD;AAKLC,QAAAA,IAAI,EAAE;AALD,OADD;AAQN;AACA;AACA;AACA;AACA;AAEAC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR,OAdF;AAiBNC,MAAAA,QAAQ,EAAE,CAjBJ;AAkBNC,MAAAA,IAAI,EAAC;AAlBC,K;;UA4BRC,e,GAAkB,gBAAqB;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXF,IAAW,QAAXA,IAAW;AAAO;AAAP,wBACM,MAAKV,KADX;AAAA,UAC7BC,KAD6B,eAC7BA,KAD6B;AAAA,UACtBY,KADsB,eACtBA,KADsB;AAAA,UACfN,MADe,eACfA,MADe;AAAA,UACPE,QADO,eACPA,QADO;AAGrCK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBL,IAAzB;AACAT,MAAAA,KAAK,CAACC,CAAN,CAAQc,IAAR,CAAaN,IAAb;AACAT,MAAAA,KAAK,CAACE,CAAN,CAAQa,IAAR,CAAaJ,KAAb;AACAX,MAAAA,KAAK,CAACG,KAAN,CAAYY,IAAZ,CAAiBP,QAAjB,EANqC,CAOrC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAKQ,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,MAAKT,KAAL,CAAWS,QAAX,GAAsB;AAAlC,OAAd;;AACAF,MAAAA,MAAM,CAACC,YAAP,GAAsB,MAAKR,KAAL,CAAWS,QAAX,GAAsB,CAA5C;AACD,K;;;;;;;WA7BD,6BAAoB;AAAA;;AAClB;AACAZ,MAAAA,MAAM,CAACqB,EAAP,CAAU,MAAV,EAAkB,UAACC,IAAD,EAAU;AAA2B;AACrD,QAAA,MAAI,CAACR,eAAL,CAAqBQ,IAArB;AACD,OAFD;AAGD;;;WA0BD,kBAAS;AACP,0BACE;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CAAC,KAAKnB,KAAL,CAAWC,KAAZ,CADR;AAEE,UAAA,MAAM,EAAE,KAAKD,KAAL,CAAWO,MAFrB;AAGE,UAAA,IAAI,EAAE,SAHR;AAIE,UAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWS,QAJvB;AAKE,UAAA,gBAAgB,EAAE,IALpB;AAME,UAAA,KAAK,EAAE;AAACW,YAAAA,KAAK,EAAC,MAAP;AAAeC,YAAAA,MAAM,EAAC;AAAtB,WANT;AAOE,UAAA,QAAQ,EAAC;AAPX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAaD;;;;EApE2C3B,KAAK,CAAC4B,S;;SAA/BvB,gB","sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:9000\", {\n  transports: [\"websocket\", \"polling\"],\n});\n\nexport default class TemperatureChart extends React.Component {\n  \n  state = {                                                     //Initial State of data\n    line1: {\n      x: [0],   \n      y: [0],\n      dummy:[0],\n      name: \"Line 1\",\n      type: 'scatter',\n    },\n    // line2: {\n    //   x: [1, 2, 3],\n    //   y: [-3, -2, -1],\n    //   name: 'Line 2',\n    // },\n\n    layout: {\n      datarevision: 0,\n    },\n    revision: 0,\n    time:'',\n  };\n\n  componentDidMount() {\n    // setInterval(this.increaseGraphic, 1000)\n    socket.on(\"temp\", (data) => {                          //Data coming in from the socket being sent to increaseGraphic function\n      this.increaseGraphic(data);\n    });\n  }\n\n  increaseGraphic = ({ value, time }) => {      //Incoming data is passed as an object.\n    const { line1, line2, layout, revision } = this.state;\n\n    console.log('revision=>',time)\n    line1.x.push(time);\n    line1.y.push(value);\n    line1.dummy.push(revision);\n    // if (line1.x.length >= 10) {\n    //   line1.x.shift()\n    //   line1.y.shift()\n    // }\n    // let _revision = revision++;\n\n    // line2.x.push(this.rand())\n    // line2.y.push(this.rand())\n    // if (line2.x.length >= 10) {\n    //   line2.x.shift()\n    //   line2.y.shift()\n    // }\n\n    this.setState({ revision: this.state.revision + 1 });\n    layout.datarevision = this.state.revision + 1;\n  };\n\n  render() {\n    return (\n      <div>\n        <Plot\n          data={[this.state.line1]}\n          layout={this.state.layout}\n          type={'scatter'}\n          revision={this.state.revision}\n          useResizeHandler={true}\n          style={{width:\"100%\", height:\"100%\"}}\n          graphDiv=\"graph\"\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}