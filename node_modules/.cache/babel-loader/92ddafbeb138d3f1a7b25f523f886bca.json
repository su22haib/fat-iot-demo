{"ast":null,"code":"import _slicedToArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/widgets/WindowPositionWidget.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CWidgetDropdown, CRow, CCol, CDropdown, CDropdownMenu, CDropdownItem, CDropdownToggle } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport ChartBarSimple from '../charts/ChartLineSimple';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket = io('http://localhost:9000', {\n  transports: ['websocket', 'polling']\n});\n\nvar WindowPositionWidget = function WindowPositionWidget() {\n  _s();\n\n  var _useState = useState('Closed'),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  useEffect(function () {\n    socket.on('window', function (data) {\n      if (data.status == '1') {\n        setCount(count = 'Open');\n      } else if (data.status == '0') {\n        setCount(count = 'Closed');\n      }\n    });\n  }); // render\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CCol, {\n      children: /*#__PURE__*/_jsxDEV(CWidgetDropdown, {\n        color: \"gradient-info\",\n        header: count,\n        text: \"Window Position\",\n        style: {\n          height: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false);\n};\n\n_s(WindowPositionWidget, \"lp9RTs1QIhN7Un0Vm3GdHHMJjS8=\");\n\n_c = WindowPositionWidget;\nexport default WindowPositionWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindowPositionWidget\");","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/widgets/WindowPositionWidget.js"],"names":["React","useEffect","useState","CWidgetDropdown","CRow","CCol","CDropdown","CDropdownMenu","CDropdownItem","CDropdownToggle","CIcon","ChartBarSimple","io","socket","transports","WindowPositionWidget","count","setCount","on","data","status","height"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,aAAjD,EAAgEC,aAAhE,EAA+EC,eAA/E,QAAsG,eAAtG;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,IAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,EAA0B;AACvCE,EAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd;AAD2B,CAA1B,CAAjB;;AAIA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAAA;;AAAA,kBACPb,QAAQ,CAAC,QAAD,CADD;AAAA;AAAA,MAC1Bc,KAD0B;AAAA,MACnBC,QADmB;;AAG/BhB,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,MAAM,CAACK,EAAP,CAAU,QAAV,EAAoB,UAACC,IAAD,EAAU;AAC1B,UAAIA,IAAI,CAACC,MAAL,IAAe,GAAnB,EAAwB;AACpBH,QAAAA,QAAQ,CAAED,KAAK,GAAG,MAAV,CAAR;AACH,OAFD,MAEO,IAAIG,IAAI,CAACC,MAAL,IAAe,GAAnB,EAAwB;AAC3BH,QAAAA,QAAQ,CAAED,KAAK,GAAG,QAAV,CAAR;AACH;AACJ,KAND;AAOH,GARQ,CAAT,CAH+B,CAa/B;;AACA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAA,6BACI,QAAC,eAAD;AACI,QAAA,KAAK,EAAC,eADV;AAEI,QAAA,MAAM,EAAEA,KAFZ;AAGI,QAAA,IAAI,EAAC,iBAHT;AAII,QAAA,KAAK,EAAE;AAAEK,UAAAA,MAAM,EAAE;AAAV;AAJX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAYH,CA1BD;;GAAMN,oB;;KAAAA,oB;AA4BN,eAAeA,oBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { CWidgetDropdown, CRow, CCol, CDropdown, CDropdownMenu, CDropdownItem, CDropdownToggle } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ChartBarSimple from '../charts/ChartLineSimple'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:9000', {\n    transports: ['websocket', 'polling'],\n})\n\nconst WindowPositionWidget = () => {\n    let [count, setCount] = useState('Closed')\n\n    useEffect(() => {\n        socket.on('window', (data) => {\n            if (data.status == '1') {\n                setCount((count = 'Open'))\n            } else if (data.status == '0') {\n                setCount((count = 'Closed'))\n            }\n        })\n    })\n\n    // render\n    return (\n        <>\n            <CCol>\n                <CWidgetDropdown\n                    color=\"gradient-info\"\n                    header={count}\n                    text=\"Window Position\"\n                    style={{ height: '80px' }}\n                ></CWidgetDropdown>\n            </CCol>\n        </>\n    )\n}\n\nexport default WindowPositionWidget\n"]},"metadata":{},"sourceType":"module"}