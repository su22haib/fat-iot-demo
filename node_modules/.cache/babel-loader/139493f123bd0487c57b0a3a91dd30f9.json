{"ast":null,"code":"import _regeneratorRuntime from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/src/views/theme/colors/Colors ori.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, createRef } from 'react';\nimport classNames from 'classnames';\nimport { useForm } from 'react-hook-form';\nimport DatePicker from 'react-datepicker';\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from '@coreui/react';\nimport { rgbToHex } from '@coreui/utils';\nimport { DocsLink } from 'src/reusable';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ReviewChart = function ReviewChart() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      xData = _useState2[0],\n      setXData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      yData = _useState4[0],\n      setYData = _useState4[1];\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useState5 = useState(new Date()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      startDate = _useState6[0],\n      setStartDate = _useState6[1]; //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n\n\n  var convertDate = function convertDate() {\n    var str = startDate.toString();\n    var parts = str.split(' ');\n    var months = {\n      Jan: '01',\n      Feb: '02',\n      Mar: '03',\n      Apr: '04',\n      May: '05',\n      Jun: '06',\n      Jul: '07',\n      Aug: '08',\n      Sep: '09',\n      Oct: '10',\n      Nov: '11',\n      Dec: '12'\n    };\n    return months[parts[1]] + '/' + parts[2] + '/' + parts[3];\n  }; // async function onSubmit(data) {\n  //   console.log(\"The Submit button was clicked\");\n  //   axios.get(`http://127.0.0.1:9000/data?node=${data.Node}&date=${convertDate(startDate)}`)\n  //     .then((response) => {\n  //       //Data coming in from API, should be sent to create the chart.\n  //       console.log(response);\n  //       setfetchedData(\n  //         {\n  //           x: response.time,\n  //           y: response.data,\n  //         }\n  //       )\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // }\n\n\n  var APIData = {};\n\n  function onSubmit(_x) {\n    return _onSubmit.apply(this, arguments);\n  } // useEffect(() => {\n  //   setfetchedData(APIData);                            //how to\n  //   console.log('UseEffect was triggered');\n  // }, []);\n  // const handleSubmit = (e) => {\n  //   e.preventdefault();\n  //   setfetchedData(data);\n  //   console.log('HandleSubmit Data.Node ===>', data.Node);\n  // };\n\n\n  function _onSubmit() {\n    _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('The Submit button was clicked');\n              axios.get(\"http://127.0.0.1:9000/data?node=\".concat(data.Node, \"&date=\").concat(convertDate(startDate), \"&data=\").concat(data.type)).then(function (res) {\n                //Data coming in from API, should be sent to create the chart.\n                console.log(res.data);\n\n                if (res.status === 200) {\n                  var _res$data = res.data,\n                      values = _res$data.values,\n                      time = _res$data.time;\n                  setYData(values);\n                  setXData(time);\n                }\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CCard, {\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: \"Review Past Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(CRow, {\n            children: [/*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Node: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, _this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register('Node')), {}, {\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1\",\n                  children: \"1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 37\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2\",\n                  children: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 37\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"3\",\n                  children: \"3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, _this)]\n              }), void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Select the Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, _this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                selected: startDate,\n                onChange: function onChange(date) {\n                  return setStartDate(date);\n                },\n                dateFormat: \"MM/dd/yyyy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Node: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, _this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register('type')), {}, {\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"TempIn\",\n                  children: \"Temperature Inside\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 37\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"TempOut\",\n                  children: \"Temperature Outside\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 37\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"LightIn\",\n                  children: \"Light Intensity Inside\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 37\n                }, _this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"LightOut\",\n                  children: \"Light Intensity Outside\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 37\n                }, _this)]\n              }), void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 33\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(CCardHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: xData,\n            y: yData,\n            type: 'scatter',\n            marker: {\n              color: 'red'\n            }\n          }],\n          useResizeHandler: true,\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          graphDiv: \"graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, _this), \"``\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(ReviewChart, \"AVLBZ5UVFVwkuR31OHMT3Kf67wU=\", false, function () {\n  return [useForm];\n});\n\n_c = ReviewChart;\nexport default ReviewChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReviewChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/gh-pages/src/views/theme/colors/Colors ori.js"],"names":["React","useEffect","useState","createRef","classNames","useForm","DatePicker","CRow","CCol","CCard","CCardHeader","CCardBody","rgbToHex","DocsLink","axios","Plot","ReviewChart","xData","setXData","yData","setYData","register","handleSubmit","errors","formState","Date","startDate","setStartDate","convertDate","str","toString","parts","split","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","APIData","onSubmit","data","console","log","get","Node","type","then","res","status","values","time","catch","error","date","x","y","marker","color","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createRef } from 'react'\nimport classNames from 'classnames'\nimport { useForm } from 'react-hook-form'\nimport DatePicker from 'react-datepicker'\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from '@coreui/react'\nimport { rgbToHex } from '@coreui/utils'\nimport { DocsLink } from 'src/reusable'\nimport axios from 'axios'\nimport Plot from 'react-plotly.js'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst ReviewChart = () => {\n    const [xData, setXData] = useState([])\n    const [yData, setYData] = useState([])\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm()\n\n    const [startDate, setStartDate] = useState(new Date())\n\n    //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n    const convertDate = () => {\n        let str = startDate.toString()\n        let parts = str.split(' ')\n        let months = {\n            Jan: '01',\n            Feb: '02',\n            Mar: '03',\n            Apr: '04',\n            May: '05',\n            Jun: '06',\n            Jul: '07',\n            Aug: '08',\n            Sep: '09',\n            Oct: '10',\n            Nov: '11',\n            Dec: '12',\n        }\n        return months[parts[1]] + '/' + parts[2] + '/' + parts[3]\n    }\n\n    // async function onSubmit(data) {\n    //   console.log(\"The Submit button was clicked\");\n\n    //   axios.get(`http://127.0.0.1:9000/data?node=${data.Node}&date=${convertDate(startDate)}`)\n    //     .then((response) => {\n    //       //Data coming in from API, should be sent to create the chart.\n    //       console.log(response);\n\n    //       setfetchedData(\n    //         {\n    //           x: response.time,\n    //           y: response.data,\n    //         }\n    //       )\n\n    //     })\n    //     .catch((error) => {\n    //       console.log(error);\n    //     });\n    // }\n    let APIData = {}\n\n    async function onSubmit(data) {\n        console.log('The Submit button was clicked')\n        axios\n            .get(`http://127.0.0.1:9000/data?node=${data.Node}&date=${convertDate(startDate)}&data=${data.type}`)\n            .then((res) => {\n                //Data coming in from API, should be sent to create the chart.\n                console.log(res.data)\n\n                if (res.status === 200) {\n                    const { values, time } = res.data\n\n                    setYData(values)\n                    setXData(time)\n                }\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    // useEffect(() => {\n    //   setfetchedData(APIData);                            //how to\n    //   console.log('UseEffect was triggered');\n    // }, []);\n\n    // const handleSubmit = (e) => {\n    //   e.preventdefault();\n    //   setfetchedData(data);\n    //   console.log('HandleSubmit Data.Node ===>', data.Node);\n    // };\n\n    return (\n        <div>\n            <CCard>\n                <CCardHeader>Review Past Data</CCardHeader>\n                <CCardBody>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <CRow>\n                            <CCol>\n                                <label>Node: </label>\n                                <select {...register('Node')}>\n                                    <option value=\"1\">1</option>\n                                    <option value=\"2\">2</option>\n                                    <option value=\"3\">3</option>\n                                </select>\n                            </CCol>\n\n                            <CCol>\n                                <label>Select the Date</label>\n                                <DatePicker\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    dateFormat=\"MM/dd/yyyy\"\n                                />\n                            </CCol>\n                            <CCol>\n                                <label>Node: </label>\n                                <select {...register('type')}>\n                                    <option value=\"TempIn\">Temperature Inside</option>\n                                    <option value=\"TempOut\">Temperature Outside</option>\n                                    <option value=\"LightIn\">Light Intensity Inside</option>\n                                    <option value=\"LightOut\">Light Intensity Outside</option>\n                                </select>\n                            </CCol>\n                            <CCol>\n                                <input type=\"submit\" />\n                            </CCol>\n                        </CRow>\n                    </form>\n                </CCardBody>\n                <CCardHeader></CCardHeader>\n                <CCardBody>\n                    <Plot\n                        data={[\n                            {\n                                x: xData,\n                                y: yData,\n                                type: 'scatter',\n                                marker: { color: 'red' },\n                            },\n                        ]}\n                        useResizeHandler={true}\n                        style={{ width: '100%', height: '100%' }}\n                        graphDiv=\"graph\"\n                    />\n                </CCardBody>\n            </CCard>\n            ``\n        </div>\n    )\n}\n\nexport default ReviewChart\n"]},"metadata":{},"sourceType":"module"}