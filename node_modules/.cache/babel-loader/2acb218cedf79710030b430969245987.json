{"ast":null,"code":"import _objectSpread from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, createRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ReviewDataChart = function ReviewDataChart() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var timeArr = [];\n  var dataArr = []; //This is where I collect data from the API response and put in an array.\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  function DbForm1() {\n    _s();\n\n    var _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n    var _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        startDate = _useState4[0],\n        setStartDate = _useState4[1]; //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n\n\n    var convertDate = function convertDate() {\n      var str = startDate.toString();\n      var parts = str.split(\" \");\n      var months = {\n        Jan: \"01\",\n        Feb: \"02\",\n        Mar: \"03\",\n        Apr: \"04\",\n        May: \"05\",\n        Jun: \"06\",\n        Jul: \"07\",\n        Aug: \"08\",\n        Sep: \"09\",\n        Oct: \"10\",\n        Nov: \"11\",\n        Dec: \"12\"\n      };\n      return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n    };\n\n    var onSubmit = function onSubmit(data) {\n      console.log(typeof data.Node);\n      console.log(convertDate(startDate));\n      console.log(\"The Submit button was clicked\"); //API GET call to fetch old data.\n\n      axios.get(\"http://127.0.0.1:9000/data?node=\".concat(data.Node, \"&date=\").concat(convertDate(startDate))).then(function (response) {\n        console.log(response);\n        timeArr = response.time;\n        dataArr = response.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    useEffect(function (timeArr, dataArr) {\n      setData(timeArr, dataArr);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: /*#__PURE__*/_jsxDEV(CRow, {\n          children: [/*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Node: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", _objectSpread(_objectSpread({}, register(\"Node\")), {}, {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"1\",\n                children: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"2\",\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 15\n              }, this)]\n            }), void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CCol, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select the Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: startDate,\n              onChange: function onChange(date) {\n                return setStartDate(date);\n              },\n              dateFormat: \"MM/dd/yyyy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CCol, {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CCard, {\n        children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n          children: \"Review Past Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n          children: /*#__PURE__*/_jsxDEV(DbForm1, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardHeader, {\n          children: \"Data Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n          children: /*#__PURE__*/_jsxDEV(Plot, {\n            data: [{\n              x: timeArr,\n              y: dataArr,\n              type: \"scatter\",\n              marker: {\n                color: \"red\"\n              }\n            }],\n            useResizeHandler: true,\n            style: {\n              width: \"100%\",\n              height: \"100%\"\n            },\n            graphDiv: \"graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 6\n    }, this);\n  }\n\n  _s(DbForm1, \"mS9ziaBavBT+UQTNrL5kVXd2Xx4=\", false, function () {\n    return [useForm];\n  });\n};\n\n_s2(ReviewDataChart, \"YtZcOlIdDPMKHWKu3ySFsr2iGxU=\");\n\n_c = ReviewDataChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReviewDataChart\");","map":{"version":3,"sources":["/home/suhaib/Desktop/Work/Iot-Demo/Code/Demo-FrontEnd/src/views/theme/colors/Colors.js"],"names":["React","useEffect","useState","createRef","useForm","DatePicker","CRow","CCol","CCard","CCardHeader","CCardBody","axios","Plot","ReviewDataChart","timeArr","dataArr","data","setData","DbForm1","register","handleSubmit","errors","formState","Date","startDate","setStartDate","convertDate","str","toString","parts","split","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","onSubmit","console","log","Node","get","then","response","time","catch","error","date","x","y","type","marker","color","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from \"@coreui/react\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ReviewDataChart = () => {\n\n  let timeArr = [];\n  let dataArr = [];\n\n  //This is where I collect data from the API response and put in an array.\n  const [data, setData] = useState({\n\n  });\n\n  function DbForm1() {\n    const {\n      register,\n      handleSubmit,\n      formState: { errors },\n    } = useForm();\n\n    const [startDate, setStartDate] = useState(new Date());\n\n    //Mon May 10 2021 12:00:03 GMT+0800 (Malaysia Time)           Change this to MM/dd/yyyy\n    const convertDate = () => {\n      let str = startDate.toString();\n      let parts = str.split(\" \");\n      let months = {\n        Jan: \"01\",\n        Feb: \"02\",\n        Mar: \"03\",\n        Apr: \"04\",\n        May: \"05\",\n        Jun: \"06\",\n        Jul: \"07\",\n        Aug: \"08\",\n        Sep: \"09\",\n        Oct: \"10\",\n        Nov: \"11\",\n        Dec: \"12\",\n      };\n      return months[parts[1]] + \"/\" + parts[2] + \"/\" + parts[3];\n    };\n\n      const onSubmit = (data) => {\n        console.log(typeof data.Node);\n        console.log(convertDate(startDate));\n        console.log(\"The Submit button was clicked\");\n        \n        //API GET call to fetch old data.\n        axios\n          .get(`http://127.0.0.1:9000/data?node=${data.Node}&date=${convertDate(startDate)}`)\n          .then((response) => {\n            console.log(response);\n           \n              timeArr = response.time;\n              dataArr = response.data;\n          \n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      };\n    \n    useEffect((timeArr, dataArr )=>{\n      setData(timeArr, dataArr)\n    });\n\n    return (\n     <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <CRow>\n          <CCol>\n            <label>Node: </label>\n            <select {...register(\"Node\")}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n          </CCol>\n          <CCol>\n            <label>Select the Date</label>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              dateFormat=\"MM/dd/yyyy\"\n            />\n          </CCol>\n          <CCol>\n            <input type=\"submit\" />\n          </CCol>\n        </CRow>\n      </form>    \n      <CCard>\n        <CCardHeader>Review Past Data</CCardHeader>\n        <CCardBody>\n          <DbForm1 />\n        </CCardBody>\n        <CCardHeader>Data Chart</CCardHeader>\n        <CCardBody>\n          <Plot\n            data={[\n              {\n                x: timeArr,\n                y: dataArr,\n                type: \"scatter\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            graphDiv=\"graph\"\n          />\n        </CCardBody>\n      </CCard>\n  </div>\n  );\n  \n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}